// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios15.5-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PhunwareMapping
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import Combine
import CoreLocation
import DeveloperToolsSupport
import Foundation
import LinkPresentation
import MapKit
import MediaPlayer
import PWCore
import PWLocation
import PWMapKit
import PhunwareCorePlugin
import PhunwareFoundation
@_exported import PhunwareMapping
import PhunwareNetworking
import PhunwarePermissionPriming
import PhunwareTheming
import SafariServices
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum POIType : String {
  case atm
  case amusementRide
  case aquarium
  case bank
  case barOrPub
  case boating
  case booth
  case breakRooms
  case businessAreas
  case cafe
  case cafeteria
  case casino
  case chargingStation
  case church
  case cleaningAndLaundry
  case coffeeShop
  case computerAndSoftware
  case conferenceRoom
  case connections
  case conventionExhibitionCentre
  case currencyExchange
  case defibrillatorAED
  case departmentAreas
  case drinkingFountain
  case education
  case elevator
  case entranceExit
  case escalator
  case fastFood
  case fireDepartment
  case firstAidStation
  case fitness
  case foodCourt
  case gamingArea
  case giftAntiqueArt
  case grassField
  case groceryStore
  case hairAndBeauty
  case healthCareService
  case hotelRoom
  case information
  case library
  case mail
  case marina
  case medicalService
  case meditationRoom
  case meetingArea
  case museum
  case museumExhibit
  case nightlife
  case nursingRoom
  case officeSupplyAndServicesStore
  case offices
  case other
  case otherGeneralMerchandise
  case paint
  case parkAndRide
  case parking
  case parkRecreationArea
  case pharmacy
  case photography
  case physician
  case playArea
  case policeService
  case pool
  case publicRestroom
  case reception
  case recreationCentre
  case registration
  case restaurant
  case restroom
  case seating
  case securityCheckpoint
  case securityOffice
  case serviceCounter
  case shoeShine
  case shopping
  case spa
  case stairs
  case taxiStand
  case theater
  case touristInformation
  case towelStation
  case track
  case transportationService
  case valet
  case vendingMachine
  case waitingArea
  case waterFeature
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HostingMode : Equatable {
  case tab(_: String, mapName: String, mapConfigKey: String)
  case unhosted(mapName: String)
  public static func == (a: PhunwareMapping.HostingMode, b: PhunwareMapping.HostingMode) -> Swift.Bool
}
public enum MappingDeeplink {
  public enum RouteBuilderDestination {
    case pointOfInterest(mapConfigKey: String?, mapName: String, id: Int)
    case coordinate(mapConfigKey: String?, mapName: String, latitude: Double, longitude: Double, floorId: Int)
  }
  public enum CategoryDestination {
    case list(mapConfigKey: String?, mapName: String, categoryId: String)
  }
  public enum FeaturedListsDestination {
    case expanded(mapName: String)
    case `default`(mapName: String)
  }
  case routeBuilder(destination: RouteBuilderDestination)
  case category(destination: CategoryDestination)
  case featuredLists(destination: FeaturedListsDestination)
  public var mapConfigKey: String? {
    get
  }
  public var mapName: String? {
    get
  }
  public var urlHost: String {
    get
  }
  public var path: String {
    get
  }
  public var urlQueryItems: [URLQueryItem] {
    get
  }
  public init?(url: URL, allowedURLSchemes: Set<String> = Bundle.main.urlSchemes)
  public init?(dynamicLinkURL: URL, matchingURLString: String?)
  public func url(withScheme urlScheme: String) -> URL?
}
extension URLComponents {
  public static func urlComponentsForRouteBuilder(_ url: URL, location: ShareableLocation, mapConfigKey: String? = nil) -> URLComponents?
  public static func urlComponentsForCategoryList(_ url: URL, categoryId: String, mapName: String, mapConfigKey: String? = nil) -> URLComponents?
}
extension UIViewController {
  @_Concurrency.MainActor @preconcurrency public var containerViewVisibleBackgroundAreaLayoutGuide: UILayoutGuide {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var containerViewSafeVisibleBackgroundAreaLayoutGuide: UILayoutGuide {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var containerViewBottomSheetLayoutGuide: UILayoutGuide {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var containerViewSafeBottomSheetLayoutGuide: UILayoutGuide {
    get
  }
}
extension UIView {
  @_Concurrency.MainActor @preconcurrency public var frameLayoutGuide: UILayoutGuide {
    get
  }
}
@_hasMissingDesignatedInitializers public class Floor {
  public var level: Int {
    get
  }
  public var identifier: Int {
    get
  }
  public var name: String {
    get
  }
  public var building: Building? {
    get
  }
  @objc deinit
}
extension Floor : Hashable {
  public static func == (lhs: Floor, rhs: Floor) -> Bool
  public func hash(into hasher: inout Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Building : Identifiable {
  public var pointOfInterests: [PointOfInterest] {
    get
  }
  public var identifier: Int {
    get
  }
  public var name: String {
    get
  }
  public var center: CLLocation? {
    get
  }
  public var floors: [Floor] {
    get
  }
  public var initialFloor: Floor? {
    get
  }
  public func floor(byId id: Int) -> Floor?
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
}
extension Building : Hashable {
  public static func == (lhs: Building, rhs: Building) -> Bool
  public func hash(into hasher: inout Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Building : MapContaining {
  public var container: MapContainer {
    get
  }
}
@_hasMissingDesignatedInitializers public class PhunwareAnalytics {
  public static func disableAutomaticScreenViewEvents()
  public static func startScreenViewEvent(_ name: String, appSection: String? = nil, parameters: [String : String]? = nil, for viewController: UIViewController)
  public static func endScreenViewEvent(for viewController: UIViewController)
  public static func setScreenName(_ screenName: String)
  public static func addCustomEvent(_ name: String, parameters: [String : String]? = nil)
  @objc deinit
}
public enum PresentationMode {
  case push
  case embed
  public static let `default`: PhunwareMapping.PresentationMode
  public static func == (a: PhunwareMapping.PresentationMode, b: PhunwareMapping.PresentationMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol POICoordinatorDelegate : AnyObject {
  func coordinatorDidFinish(_ coordinator: POICoordinator)
  func coordinator(_ coordinator: POICoordinator, didSelectActionLink actionLink: ActionLink)
  func coordinator(_ coordinator: POICoordinator, didStartHomeToVenueRoutingWith geozoneIdentifiers: Set<String>, destination: HomeToVenueDestination)
  func coordinator(_ coordinator: POICoordinator, didStopHomeToVenueRoutingWith geozoneIdentifiers: Set<String>)
  func coordinator(_ coordinator: POICoordinator, didRequestMeetingRoomsFor poiIdentifiers: [String], completion: @escaping (Result<[MeetingRoom], Error>) -> Void)
}
@objc public class POICoordinator : NSObject, Coordinator {
  public var childCoordinators: [Coordinator]
  public var navigationController: UINavigationController
  weak public var delegate: POICoordinatorDelegate?
  public var childMappingDeeplinkHandlers: [any PhunwareMapping.MappingDeeplinkNavigable] {
    get
  }
  public var pendingMappingDeeplink: DeferredMappingDeeplink?
  public init(navigationController: UINavigationController, mapConfig: MapConfig, mapLocalization: MapLocalization, mapContainerSelector: MapContainerSelector, mapTheme: MapTheme, allowsExitButtonToBeShown: Bool = true, hidesBottomBarWhenPushed: Bool = true, tabBarItem: UITabBarItem? = nil, presentationMode: PresentationMode = .default, meetingRoomPOIIdentifiers: [String], initialMeetingRoomPOIImageSize: CGSize?, buildingGroundOverlayRenderers: [BuildingGroundOverlayRenderer]? = nil)
  @objc deinit
  public func start()
  public func setMeetingRooms(_ meetingRooms: [MeetingRoom])
}
extension POICoordinator : CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation])
  @objc dynamic public func locationManager(_ manager: CLLocationManager, didFailWithError error: Error)
  @objc dynamic public func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus)
}
extension POICoordinator : MappingDeeplinkNavigable {
  public var isMappingDeeplinkingAvailable: Bool {
    get
  }
  public func queryCanOpenDirectly(_ deeplink: MappingDeeplink, completion: @escaping (Bool) -> Void)
  public func prepareForNavigation(to deeplink: MappingDeeplink)
  public func openDeeplink(_ deeplink: MappingDeeplink) -> Bool
}
public protocol MappingModuleDelegate : AnyObject {
  func mappingModuleDidRequestConfiguration(_ module: MappingModule) -> MappingConfiguration?
  func mappingModule(_ module: MappingModule, didRequestMeetingRoomsFor poiIdentifiers: [String], completion: @escaping (Result<[MeetingRoom], Error>) -> Void)
  func mappingModule(_ module: MappingModule, didRequestShareURLFor location: ShareableLocation, withCompletionHandler completionHandler: @escaping (Result<URL, Error>) -> Void)
}
extension MappingModuleDelegate {
  public func mappingModule(_ module: MappingModule, didRequestMeetingRoomsFor poiIdentifiers: [String], completion: @escaping (Result<[MeetingRoom], Error>) -> Void)
}
public class MappingModule : ModulePlugin {
  public var id: String {
    get
  }
  weak public var delegate: MappingModuleDelegate?
  public init<T>(themeConfigurator: T, homeToVenueConfiguration: HomeToVenueConfiguration, delegate: MappingModuleDelegate) where T : PhunwareTheming.ThemeConfiguring, T.Theme == PhunwareMapping.MapTheme
  public func didEnterGeozone(geozoneIdentifier: String)
  public func didExitGeozone(geozoneIdentifier: String)
  @objc deinit
}
extension MappingModule : ModuleTabProviding {
  public func coordinator(for tabIdentifier: String, using navController: UINavigationController) -> Coordinator?
}
extension MappingModule : ModuleUnhostedContentProviding {
  public func unhostedCoordinator(for deeplink: Deeplink, using navController: UINavigationController) -> UnhostedCustomContentCoordinator?
}
extension MappingModule : MappingCoordinatorDelegate {
  public func coordinatorDidRequestConfiguration(_ coordinator: MappingCoordinator) -> MappingConfiguration?
  public func coordinator(_ coordinator: MappingCoordinator, didRequestMeetingRoomsFor poiIdentifiers: [String], completion: @escaping (Result<[MeetingRoom], Error>) -> Void)
  public func coordinator(_ coordinator: MappingCoordinator, didRequestShareURLFor location: ShareableLocation, withCompletionHandler completionHandler: @escaping (Result<URL, Error>) -> Void)
}
public enum RoutingMode {
  case blueDot
  case `static`
  public static func == (a: PhunwareMapping.RoutingMode, b: PhunwareMapping.RoutingMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Gradient {
  public struct Stop {
    public var color: UIColor
    public var location: CGFloat
    public init(color: UIColor, location: CGFloat)
  }
  public enum Kind {
    case linear(start: CGPoint, end: CGPoint)
    case radial(startCenter: CGPoint, startRadius: CGFloat, endCenter: CGPoint, endRadius: CGFloat)
  }
  public static func horizontal(leftColor: UIColor, rightColor: UIColor) -> Gradient
  public static func vertical(topColor: UIColor, bottomColor: UIColor) -> Gradient
  public var stops: [Stop]
  public var kind: Kind
  public var options: CGGradientDrawingOptions
  public init(stops: [Stop], kind: Kind, options: CGGradientDrawingOptions = [])
  public var cgGradient: CGGradient? {
    get
  }
}
public protocol MappingCoordinatorDelegate : AnyObject {
  func coordinatorDidRequestConfiguration(_ coordinator: MappingCoordinator) -> MappingConfiguration?
  func coordinator(_ coordinator: MappingCoordinator, didRequestMeetingRoomsFor poiIdentifiers: [String], completion: @escaping (Result<[MeetingRoom], Error>) -> Void)
  func coordinator(_ coordinator: MappingCoordinator, didRequestShareURLFor location: ShareableLocation, withCompletionHandler completionHandler: @escaping (Result<URL, Error>) -> Void)
}
public class MappingCoordinator : Coordinator, UnhostedCustomContentCoordinator {
  public var childMappingDeeplinkHandlers: [any PhunwareMapping.MappingDeeplinkNavigable]
  public var pendingMappingDeeplink: DeferredMappingDeeplink?
  public var pendingDeeplink: DeferredDeeplink?
  weak public var unhostedContentCoordinatorDelegate: UnhostedCustomContentCoordinatorDelegate?
  public var childCoordinators: [any PhunwareFoundation.Coordinator]
  public var navigationController: UINavigationController
  weak public var delegate: MappingCoordinatorDelegate?
  public init(navigationController: UINavigationController, hostingMode: HostingMode, flow: Flow = .default, configuration: MappingConfiguration?, homeToVenueMonitor: HomeToVenueMonitor, theme: MapTheme, delegate: MappingCoordinatorDelegate)
  public func start()
  public func didEnterGeozone(geozoneIdentifier: String)
  public func didExitGeozone(geozoneIdentifier: String)
  @objc deinit
}
extension MappingCoordinator : DeeplinkNavigable, MappingDeeplinkNavigable {
  public func queryCanOpenDirectly(_ deeplink: Deeplink, completion: @escaping (Bool) -> Void)
  public func prepareForNavigation(to deeplink: Deeplink)
  public func openDeeplink(_ deeplink: Deeplink) -> Bool
  public func queryCanOpenDirectly(_ deeplink: MappingDeeplink, completion: @escaping (Bool) -> Void)
  public func prepareForNavigation(to deeplink: MappingDeeplink)
  public func openDeeplink(_ deeplink: MappingDeeplink) -> Bool
}
extension MappingCoordinator : PermissionCoordinatorDelegate {
  public func coordinator(_ coordinator: PermissionCoordinator, customImageWithName name: String) -> UIImage?
  public func coordinatorDidFinish(_ coordinator: PermissionCoordinator)
}
extension MappingCoordinator : POICoordinatorDelegate {
  public func coordinatorDidFinish(_ coordinator: POICoordinator)
  public func coordinator(_ coordinator: POICoordinator, didSelectActionLink actionLink: ActionLink)
  public func coordinator(_ coordinator: POICoordinator, didStartHomeToVenueRoutingWith geozoneIdentifiers: Set<String>, destination: HomeToVenueDestination)
  public func coordinator(_ coordinator: POICoordinator, didStopHomeToVenueRoutingWith geozoneIdentifiers: Set<String>)
  public func coordinator(_ coordinator: POICoordinator, didRequestMeetingRoomsFor poiIdentifiers: [String], completion: @escaping (Result<[MeetingRoom], Error>) -> Void)
}
extension MappingCoordinator : ShareLocationCoordinatorDelegate {
  public func coordinatorDidFinish(_ coordinator: ShareLocationCoordinator)
  public func coordinator(_ coordinator: ShareLocationCoordinator, didRequestShareURLFor location: ShareableLocation, withCompletionHandler completionHandler: @escaping (Result<URL, Error>) -> Void)
}
extension UIButton {
  @_Concurrency.MainActor @preconcurrency public func setSymbolImage(named name: String, withWeight weight: UIImage.SymbolWeight)
}
public class HomeToVenueMonitor {
  public init(configuration: HomeToVenueConfiguration)
  public func didEnterGeozone(geozoneIdentifier: String)
  public func didExitGeozone(geozoneIdentifier: String)
  public func didStartHomeToVenueRoutingWith(geozoneIdentifiers: Set<String>, destination: HomeToVenueDestination)
  public func didStopHomeToVenueRoutingWith(geozoneIdentifiers: Set<String>)
  @objc deinit
}
public enum Flow {
  case map
  case shareLocation
  public static let `default`: PhunwareMapping.Flow
  public static func == (a: PhunwareMapping.Flow, b: PhunwareMapping.Flow) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ExternalMappingAppDeeplink {
  public static let appleMapsDrivingDirections: PhunwareMapping.ExternalMappingAppDeeplink
  public static let googleMapsDrivingDirections: PhunwareMapping.ExternalMappingAppDeeplink
  public let appName: String
  public let urlScheme: String
  public let urlHost: String
  public let urlPathHandler: (PointOfInterest) -> String
  public let queryItemsHandler: (PointOfInterest) -> [(name: String, value: String?)]
  public init(appName: String, urlScheme: String, urlHost: String = "", urlPathHandler: @escaping (_ poiForPath: PointOfInterest) -> String = { _ in "" }, queryItemsHandler: @escaping (_ poiForQueryItems: PointOfInterest) -> [(name: String, value: String?)])
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class SolidColorButton : UIButton {
  @_Concurrency.MainActor @preconcurrency public func backgroundImageColor(for state: UIControl.State) -> UIColor?
  @_Concurrency.MainActor @preconcurrency public func setBackgroundImageColor(_ color: UIColor?, for state: UIControl.State)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency public func configureSolidColorButton(_ config: TextConfiguration, for state: UIControl.State)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum ActionLinkType : Codable, RawRepresentable, Equatable {
  case calendar
  case email
  case location
  case phone
  case weblink
  case info
  case form
  case meetingRoomStatus(MeetingRoom.Status)
  case unknown
  public var rawValue: String {
    get
  }
  public init(rawValue: String)
  public typealias RawValue = Swift.String
}
public struct ActionLink : Codable, Equatable {
  public let type: ActionLinkType?
  public let displayText: String?
  public let actionContent: String?
  public var isValid: Bool {
    get
  }
  public static func == (a: PhunwareMapping.ActionLink, b: PhunwareMapping.ActionLink) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc final public class NotificationToken : NSObject {
  public init(notificationCenter: NotificationCenter = .default, token: Any)
  @objc deinit
}
extension NotificationCenter {
  public func observe(name: NSNotification.Name?, object obj: Any?, queue: OperationQueue?, using block: @escaping (Notification) -> ()) -> NotificationToken
}
public struct POIEstimation {
}
extension POIEstimation : Comparable {
  public static func == (lhs: POIEstimation, rhs: POIEstimation) -> Bool
  public static func < (lhs: POIEstimation, rhs: POIEstimation) -> Bool
}
public protocol CellViewModel : PhunwareMapping.CellIdentifiable {
}
public protocol CellViewModelConfigurable {
  func configure(cellViewModel: CellViewModel)
  func configureWillDisplayCell(cellViewModel: CellViewModel)
  func configureDidEndDisplaying(cellViewModel: CellViewModel)
}
extension CellViewModelConfigurable {
  public func configureWillDisplayCell(cellViewModel: CellViewModel)
  public func configureDidEndDisplaying(cellViewModel: CellViewModel)
}
public struct ContentEmbeddingConfig {
}
public protocol ShareLocationCoordinatorDelegate : AnyObject {
  func coordinatorDidFinish(_ coordinator: ShareLocationCoordinator)
  func coordinator(_ coordinator: ShareLocationCoordinator, didRequestShareURLFor location: ShareableLocation, withCompletionHandler completionHandler: @escaping (Result<URL, Error>) -> Void)
}
@objc public class ShareLocationCoordinator : NSObject, Coordinator {
  public var childCoordinators: [Coordinator]
  public var navigationController: UINavigationController
  weak public var delegate: ShareLocationCoordinatorDelegate?
  public init(navigationController: UINavigationController, mapConfig: MapConfig, mapLocalization: MapLocalization, mapContainerSelector: MapContainerSelector, mapTheme: MapTheme, allowsExitButtonToBeShown: Bool = true, hidesBottomBarWhenPushed: Bool = true, presentationMode: PresentationMode = .default, tabBarItem: UITabBarItem? = nil, buildingGroundOverlayRenderers: [BuildingGroundOverlayRenderer]? = nil)
  public func start()
  @objc deinit
}
public class PointOfInterest : Equatable, Comparable {
  public enum ParkingLocation {
    case coordinate(CLLocationCoordinate2D)
    case addressString(String)
  }
  public struct Link : Decodable {
    public let title: String
    public let url: URL
    public init(from decoder: any Swift.Decoder) throws
  }
  public var identifier: Int {
    get
  }
  public var campusID: Int {
    get
  }
  public var title: String {
    get
  }
  public var buildingID: Int {
    get
  }
  public var buildingName: String {
    get
  }
  public var floorDisplayName: String {
    get
  }
  public var imageURL: URL? {
    get
  }
  public var headerImageURL: URL? {
    get
  }
  public var defaultHeaderImageName: String {
    get
  }
  public var summary: String? {
    get
  }
  public var websiteURLString: String? {
    get
  }
  public var audioURL: URL? {
    get
  }
  public var links: [Link] {
    get
  }
  public var phoneNumberString: String? {
    get
  }
  public var keywords: [String] {
    get
  }
  public var arrivalURL: URL? {
    get
  }
  public var arrivalURLTitle: String? {
    get
  }
  public var poiType: String {
    get
  }
  public var floor: Floor? {
    get
  }
  public var coordinate: CLLocationCoordinate2D {
    get
  }
  weak public var parkingPOI: PointOfInterest? {
    get
  }
  public var parkingCoordinate: CLLocationCoordinate2D? {
    get
  }
  public var parkingAddress: String? {
    get
  }
  public var effectiveParkingLocation: ParkingLocation {
    get
  }
  public var parkingPOIIdentifier: Int? {
    get
  }
  public var isRoutable: Bool {
    get
  }
  public init(_ pwPointOfInterest: PWPointOfInterest)
  public static func == (lhs: PointOfInterest, rhs: PointOfInterest) -> Bool
  public static func < (lhs: PointOfInterest, rhs: PointOfInterest) -> Bool
  @objc deinit
}
extension UIPanGestureRecognizer {
  public enum VerticalDirection {
    case up
    case down
    case none
    public static func == (a: UIKit.UIPanGestureRecognizer.VerticalDirection, b: UIKit.UIPanGestureRecognizer.VerticalDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@_hasMissingDesignatedInitializers public class UserLocation {
  public var buildingIdentifier: Int {
    get
  }
  public var coordinate: CLLocationCoordinate2D {
    get
  }
  public var floorIdentifier: Int? {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class DropShadowView : UIView {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var shadowColor: UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var shadowOffset: CGSize {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var shadowRadius: CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var shadowOpacity: Float {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var cornerRadius: CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var backgroundColor: UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func addSubview(_ view: UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func insertSubview(_ view: UIView, at index: Int)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func insertSubview(_ view: UIView, belowSubview siblingSubview: UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func insertSubview(_ view: UIView, aboveSubview siblingSubview: UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?)
  @objc deinit
}
public enum DeeplinkResolver {
  case tabNavigation(_: String)
  case map(_: String)
  case shareLocation(_: String)
  case mapping(MappingDeeplink)
  public init?(_ deeplink: Deeplink)
}
public struct ShareableLocation {
  public let mapName: String
  public let floorID: Int?
  public let coordinate: CLLocationCoordinate2D
}
public struct HomeToVenueDestination {
  public let mapName: String
  public let pointOfInterest: PointOfInterest
}
extension Bundle {
  public struct URLType : Codable {
    public var role: String?
    public var name: String?
    public var iconFile: String?
    public var schemes: [String]
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var urlTypes: [URLType] {
    get
  }
  public var urlSchemes: Set<String> {
    get
  }
}
public class BuildingGroundOverlayRenderer {
  public init(buildingIdentifiers: [Int], groundRenderer: MKOverlayRenderer)
  @objc deinit
}
extension BuildingGroundOverlayRenderer {
  public static func makeRenderer(using image: UIImage, buildingIdentifiers: [Int]) -> BuildingGroundOverlayRenderer
  public static func makeRenderer(using url: URL, buildingIdentifiers: [Int]) -> BuildingGroundOverlayRenderer
}
public enum MapContainer {
  case campus(Campus)
  case building(Building)
}
public protocol MapContaining {
  var container: MapContainer { get }
  var pointOfInterests: [PointOfInterest] { get }
  var center: CLLocation? { get }
  var floors: [Floor] { get }
  var initialFloor: Floor? { get }
  func floor(byId id: Int) -> Floor?
}
public struct MeetingRoom {
  public enum Status {
    case available
    case occupied
    case unavailable
    case unknown
    case `default`
    public static func == (a: PhunwareMapping.MeetingRoom.Status, b: PhunwareMapping.MeetingRoom.Status) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let maasPOIId: String
  public let status: Status
  public let poiImageSize: CGSize?
  public init(maasPOIId: String, status: Status, poiImageSize: CGSize?)
}
public protocol CellIdentifiable : AnyObject {
  var cellIdentifier: String { get }
}
public struct MappingConfiguration {
  public struct MeetingRoom {
    public var meetingRoomPOIIdentifiers: [String]
    public var initialMeetingRoomPOIImageSize: CGSize?
    public init(meetingRoomPOIIdentifiers: [String] = [], initialMeetingRoomPOIImageSize: CGSize? = nil)
  }
  public var mapConfigKey: String
  public var mapConfig: MapConfig
  public var mapLocalization: MapLocalization
  public var meetingRoom: MeetingRoom
  public var mapOverlayRenderers: [BuildingGroundOverlayRenderer]
  public init(mapConfigKey: String, mapConfig: MapConfig, mapLocalization: MapLocalization, meetingRoom: MeetingRoom = .init(), mapOverlayRenderers: [BuildingGroundOverlayRenderer] = [])
}
extension String {
  public func normalizedPhoneURL() -> URL?
}
public enum Category : String, Equatable, Identifiable {
  case aquariums
  case atm
  case bars
  case beaches
  case businessCenters
  case casino
  case chapels
  case chargingStations
  case coffee
  case conferenceRooms
  case conventionCenters
  case defibrillator
  case departments
  case dining
  case education
  case elevatorsEscalators
  case emergency
  case entrances
  case events
  case exhibits
  case guestServices
  case hotelAmenities
  case information
  case laundry
  case library
  case medicalServices
  case more
  case nightlife
  case nursingRooms
  case parking
  case pharmacy
  case photoStations
  case pools
  case reception
  case recreation
  case registration
  case restrooms
  case rides
  case rooms
  case scenicPoints
  case seatingAreas
  case shopping
  case stairs
  case statusBoards
  case taxiRideshare
  case towelStations
  case transportation
  case valet
  case vendingMachines
  case waterFountains
  case wellness
  case workplaceAmenities
  case workspaces
  case unknown
  public init(id: String)
  public var poiTypes: [POIType]? {
    get
  }
  public var iconImage: UIImage? {
    get
  }
  public var id: String {
    get
  }
  public var titleKey: String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias ID = Swift.String
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class Campus {
  public var pointOfInterests: [PointOfInterest] {
    get
  }
  public var identifier: Int {
    get
  }
  public var center: CLLocation? {
    get
  }
  public var buildings: [Building] {
    get
  }
  public var floors: [Floor] {
    get
  }
  public var initialFloor: Floor? {
    get
  }
  public var overviewBuilding: Building? {
    get
  }
  public func building(byId id: Int) -> Building?
  public func floor(byId id: Int) -> Floor?
  @objc deinit
}
extension Campus : Hashable {
  public static func == (lhs: Campus, rhs: Campus) -> Bool
  public func hash(into hasher: inout Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Campus : MapContaining {
  public var container: MapContainer {
    get
  }
}
public class KeyboardAdjuster {
  public init(adjustingView: UIView)
  public func start()
  @objc deinit
}
public struct HomeToVenueConfiguration {
  public let urlTypeName: String
  public let notificationText: String
  public init(urlTypeName: String, notificationText: String)
}
public protocol RegisterableFontFamily : Swift.CaseIterable, Swift.RawRepresentable {
  var rawValue: String { get }
  static var isRegistered: Bool { get set }
  static func registerFonts()
}
extension RegisterableFontFamily {
  public static func registerFonts()
  public func of(size: CGFloat) -> UIFont
}
public struct MapTheme {
  public struct TextStyle {
    public init(textColor: UIColor, font: UIFont)
  }
  public struct ModuleNavigation {
    public struct ExitButton {
      public init(iconTint: UIColor, backgroundTint: UIColor)
    }
    public init(exitButton: ExitButton)
  }
  public struct BottomSheet {
    public init(title: TextStyle, detail: TextStyle, handle: UIColor, textFieldBackground: UIColor, background: UIColor)
  }
  public struct Search {
    public init(title: TextStyle, placeholder: TextStyle, tint: UIColor, topNoResults: TextStyle, bottomNoResults: TextStyle, currentLocation: TextStyle, currentLocationIcon: UIColor, sectionHeader: TextStyle, sectionHeaderBackground: UIColor, cancelButton: TextStyle, searchBarBackground: UIColor, searchByBuildingButton: TextStyle, searchChip: Chip, filterSelectorTitle: TextStyle, filterSelectorList: TextStyle)
  }
  public struct NavigationBar {
    public init(title: TextStyle, tint: UIColor)
  }
  public struct Category {
    public init(header: TextStyle, itemTitle: TextStyle, background: UIColor)
  }
  public struct FeaturedList {
    public init(header: TextStyle, itemTitle: TextStyle, itemSubtitle: TextStyle, background: UIColor, dropShadow: UIColor)
  }
  public struct FeaturedListPOI {
    public init(topBarTitle: TextStyle, topBarCancelButton: TextStyle, topBarBackground: UIColor, closeButtonBackground: UIColor, closeButtonTint: UIColor, itemTitle: TextStyle, background: UIColor, dropShadow: UIColor)
  }
  public struct FloorSelector {
    public init(buttonTint: UIColor, buttonBackground: UIColor, itemBackground: UIColor, selectedItemBackground: UIColor, itemTitle: TextStyle, selectedItemTitle: TextStyle)
  }
  public struct POI {
    public init(title: TextStyle, building: TextStyle, floor: TextStyle, arrivalDistanceEstimation: TextStyle, arrivalTimeEstimation: TextStyle, waitTimeEstimation: TextStyle)
  }
  public struct TextField {
    public init(label: TextStyle, field: TextStyle, background: UIColor)
  }
  public struct SolidColorButton {
    public struct State {
      public init(title: TextStyle, background: UIColor)
    }
    public init(normalState: State, disabledState: State)
  }
  public struct AccessibleRoute {
    public init(label: TextStyle, iconTint: UIColor, toggleTint: UIColor)
  }
  public struct Detail {
    public struct AudioPlayer {
      public init(background: UIColor, bar: UIColor, controls: UIColor, progress: UIColor, time: TextStyle, header: TextStyle)
    }
    public init(title: TextStyle, headerTitle: TextStyle, category: TextStyle, arrivalEstimation: TextStyle, location: TextStyle, actionLink: TextStyle, waitTimeEstimation: TextStyle, actionLinkIcon: UIColor, waitTimeEstimationRefreshButtonTint: UIColor, closeButtonBackground: UIColor, closeButtonTint: UIColor, dotSeparatorIcon: UIColor, walkingIcon: UIColor, audioPlayer: AudioPlayer, detailDescription: TextStyle)
  }
  public struct DirectionList {
    public init(titlePrefix: TextStyle, title: TextStyle, arrivalEstimation: TextStyle, exit: SolidColorButton, directionsHeader: TextStyle, itemInstruction: TextStyle, itemDescription: TextStyle, itemSelection: UIColor, itemIconBackground: UIColor)
  }
  public struct OffRoute {
    public init(title: TextStyle, message: TextStyle, dismiss: TextStyle, reroute: TextStyle, dontShowAgain: TextStyle)
  }
  public struct LoadingSpinner {
    public init(title: TextStyle, tint: UIColor, overlay: UIColor)
  }
  public struct LocationPermissionPrimer {
    public init(iconTint: UIColor, title: TextStyle, body: TextStyle, bulletedList: TextStyle, proceedButton: SolidColorButton, cancelButton: SolidColorButton)
  }
  public struct ShareLocation {
    public struct InfoButton {
      public init(title: TextStyle, image: UIImage, background: UIColor)
    }
    public struct ShareButton {
      public init(title: TextStyle, backgroundStart: UIColor, backgroundEnd: UIColor)
    }
    public struct InfoSheet {
      public init(title: TextStyle, detail: TextStyle, okayButton: TextStyle, okayButtonBackground: UIColor)
    }
    public init(infoButton: InfoButton, shareButton: ShareButton, infoSheet: InfoSheet, annotationImage: UIImage?)
  }
  public struct MapViewSelection {
    public init(title: TextStyle, closeButtonColor: UIColor, buildingTitle: TextStyle, buildingName: TextStyle, floorTitle: TextStyle, floorName: TextStyle, changeBuildingButton: TextStyle, changeFloorButton: TextStyle)
  }
  public struct GenericPicker {
    public init(title: TextStyle, backButtonColor: UIColor, cellTitle: TextStyle)
  }
  public struct POIList {
    public struct Header {
      public init(title: TextStyle, backgroundColor: UIColor)
    }
    public init(header: Header)
  }
  public struct BuildingSearch {
    public struct SearchBar {
      public init(placeholder: TextStyle, tint: UIColor, background: UIColor)
    }
    public struct SectionHeader {
      public init(title: TextStyle, background: UIColor)
    }
    public init(title: TextStyle, searchBar: SearchBar, cancelButton: TextStyle, sectionHeader: SectionHeader, buildingCellTitle: TextStyle, topNoResults: TextStyle, bottomNoResults: TextStyle)
  }
  public struct ArrivalCard {
    public init(arrivalText: TextStyle, title: TextStyle, linkButton: SolidColorButton, closeButtonBackground: UIColor, closeButtonTint: UIColor)
  }
  public struct RoundToggleButton {
    public init(backgroundColor: UIColor, tint: UIColor, selectedTint: UIColor, text: TextStyle, selectedText: TextStyle)
  }
  public struct Chip {
    public struct State {
      public init(title: TextStyle, iconTint: UIColor, borderColor: UIColor, background: UIColor)
    }
    public init(normalState: State, selectedState: State)
  }
  public init(colorPalette: ColorPalette, textStyles: TextStyles, moduleNavigation: ModuleNavigation? = nil, bottomSheet: BottomSheet? = nil, search: Search? = nil, navigationBar: NavigationBar? = nil, category: Category? = nil, featuredList: FeaturedList? = nil, featuredListPOI: FeaturedListPOI? = nil, floorSelector: FloorSelector? = nil, poi: POI? = nil, textField: TextField? = nil, accessibleRoute: AccessibleRoute? = nil, startRoute: SolidColorButton? = nil, detail: Detail? = nil, directions: DirectionList? = nil, offRoute: OffRoute? = nil, loadingSpinner: LoadingSpinner? = nil, locationPermission: LocationPermissionPrimer? = nil, shareLocation: ShareLocation? = nil, mapViewSelection: MapViewSelection? = nil, buildingPicker: GenericPicker? = nil, floorPicker: GenericPicker? = nil, poiList: POIList? = nil, buildingSearch: BuildingSearch? = nil, arrivalCard: ArrivalCard? = nil, soundButton: MapTheme.RoundToggleButton? = nil)
}
public protocol PermissionCoordinatorDelegate : AnyObject {
  func coordinator(_ coordinator: PermissionCoordinator, customImageWithName name: String) -> UIImage?
  func coordinatorDidFinish(_ coordinator: PermissionCoordinator)
}
public class PermissionCoordinator : Coordinator {
  public var childCoordinators: [Coordinator]
  public var navigationController: UINavigationController
  weak public var delegate: PermissionCoordinatorDelegate?
  public init(navigationController: UINavigationController, mapLocalization: MapLocalization, mapTheme: MapTheme, completionNavigationAction: PermissionPrimingCompletionNavigationAction = .unwind)
  public func start()
  @objc deinit
}
extension PermissionCoordinator : PermissionPrimingCoordinatorDelegate {
  public func coordinator(_ coordinator: PermissionPrimingCoordinator, didCompleteWithPrimedPermissions primedPermissions: Set<Permission>?, fulfilledPermissions: Set<Permission>?, unfulfilledPermissions: Set<Permission>?, failedPermissions: Set<Permission>?) -> PermissionPrimingCompletionNavigationAction
  public func displayTemplate(for coordinator: PermissionPrimingCoordinator, permissions: OrderedSet<Permission>) -> DisplayTemplate
}
public protocol MapContainerConfiguring {
  var identifier: Int { get }
  var onCampusGeozoneIdentifiers: [Int] { get }
  var languageCode: String { get }
  var featuredListConfig: MapConfig.FeaturedListConfig? { get }
  var mapContainerConfigValue: MapConfig.MapContainerConfig { get }
}
public struct MapConfig : Codable {
  public struct Language : Codable {
    public let code: String?
    public let displayText: String?
    public let stringsFile: String?
    public let defaultSpokenLanguageRegion: String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum MapContainerConfig {
    case campus(CampusConfig)
    case building(BuildingConfig)
  }
  public struct CampusConfig : Codable, MapContainerConfiguring {
    public let campusIdentifier: Int
    public let onCampusGeozoneIdentifiers: [Int]
    public let languageCode: String
    public let featuredListConfig: FeaturedListConfig?
    public var identifier: Int {
      get
    }
    public var mapContainerConfigValue: MapConfig.MapContainerConfig {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct BuildingConfig : Codable, MapContainerConfiguring {
    public let buildingIdentifier: Int
    public let onCampusGeozoneIdentifiers: [Int]
    public let languageCode: String
    public let featuredListConfig: FeaturedListConfig?
    public var identifier: Int {
      get
    }
    public var mapContainerConfigValue: MapConfig.MapContainerConfig {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct FeaturedListConfig : Codable, Hashable {
    public let featuredListHeader: String?
    public let featuredLists: [FeaturedList]
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PhunwareMapping.MapConfig.FeaturedListConfig, b: PhunwareMapping.MapConfig.FeaturedListConfig) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct FeaturedList : Codable, Hashable {
    public let identifier: String?
    public let title: String?
    public let subTitle: String?
    public let imageURL: String?
    public let pois: [POI]
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PhunwareMapping.MapConfig.FeaturedList, b: PhunwareMapping.MapConfig.FeaturedList) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct POI : Codable, Hashable {
    public let identifier: String?
    public let title: String?
    public let imageURL: String?
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PhunwareMapping.MapConfig.POI, b: PhunwareMapping.MapConfig.POI) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Map : Codable {
    public let mapName: String?
    public let campusConfigs: [CampusConfig]?
    public let buildingConfigs: [BuildingConfig]?
    public let offCampusGeofenceMeters: Double
    public let latitude: Double
    public let longitude: Double
    public let initialZoomLatDelta: Double
    public let initialZoomLongDelta: Double
    public let routeSnappingTolerance: String
    public let isManagedCompassEnabled: Bool
    public let isHomeToVenueEnabled: Bool
    public let isBlueDotLocationEnabled: Bool
    public let isMeetingRoomStatusEnabled: Bool
    public let meetingRoomStatusRefreshIntervalMilliSeconds: Double
    public let areAccessibleRoutesEnabledByDefault: Bool
    public let isLandmarkBasedRoutingEnabled: Bool
    public let travelTimeMetersPerSecond: Double
    public let enableWaitTimes: Bool
    public let waitTimeURLString: String?
    public init(from decoder: Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
  }
  public struct MapSetting : Codable {
    public let maps: [Map]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct RouteUIConfig : Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct OffRouteConfig : Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct RouteArrivalConfig : Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public let languages: [Language]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DeferredMappingDeeplink {
}
public protocol MappingDeeplinkNavigable : AnyObject {
  var childMappingDeeplinkHandlers: [MappingDeeplinkNavigable] { get }
  var isMappingDeeplinkingAvailable: Bool { get }
  var pendingMappingDeeplink: DeferredMappingDeeplink? { get set }
  func queryCanOpenDirectly(_ deeplink: MappingDeeplink, completion: @escaping (Bool) -> Void)
  func openDeeplink(_ deeplink: MappingDeeplink) -> Bool
  func prepareForNavigation(to deeplink: MappingDeeplink)
}
extension MappingDeeplinkNavigable {
  public var isMappingDeeplinkingAvailable: Bool {
    get
  }
  public func prepareForNavigation(to deeplink: MappingDeeplink)
  public func followDeeplink(_ deeplink: MappingDeeplink, completion: @escaping (Bool) -> Void = { _ in })
  public func followPendingMappingDeeplinkIfAvailable()
}
public enum CommonError : Error {
  case internalInconsistency
  case failedHTTPStatus(code: Int)
  case unsupportedDecodableType
  case invalidURL
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class GradientBackgroundButton : UIButton {
  @_Concurrency.MainActor @preconcurrency public func backgroundImageGradient(for state: UIControl.State) -> Gradient?
  @_Concurrency.MainActor @preconcurrency public func setBackgroundImageGradient(_ gradient: Gradient?, withSize size: CGSize? = nil, for state: UIControl.State)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct MapThemeConfigurator : ThemeConfiguring {
  public let colors: ColorPalette
  public let texts: TextStyles
  public init(colors: ColorPalette, texts: TextStyles)
  public func configureTheme() -> MapTheme
  public typealias Theme = PhunwareMapping.MapTheme
}
public struct MapContainerSelector {
  public init(languageCode: String, mapName: String)
}
public typealias MapLocalizationDictionary = Dictionary<String, Dictionary<String, String>>
public class MapLocalization {
  public init(with defaultLanguageCode: String)
  public func setLocalization(localizationDictionary: MapLocalizationDictionary?)
  @objc deinit
}
extension MapLocalization {
  public var currentLanguageCode: String {
    get
  }
}
extension PhunwareMapping.POIType : Swift.Equatable {}
extension PhunwareMapping.POIType : Swift.Hashable {}
extension PhunwareMapping.POIType : Swift.RawRepresentable {}
extension PhunwareMapping.PresentationMode : Swift.Equatable {}
extension PhunwareMapping.PresentationMode : Swift.Hashable {}
extension PhunwareMapping.RoutingMode : Swift.Equatable {}
extension PhunwareMapping.RoutingMode : Swift.Hashable {}
extension PhunwareMapping.Flow : Swift.Equatable {}
extension PhunwareMapping.Flow : Swift.Hashable {}
extension UIKit.UIPanGestureRecognizer.VerticalDirection : Swift.Equatable {}
extension UIKit.UIPanGestureRecognizer.VerticalDirection : Swift.Hashable {}
extension PhunwareMapping.MeetingRoom.Status : Swift.Equatable {}
extension PhunwareMapping.MeetingRoom.Status : Swift.Hashable {}
extension PhunwareMapping.Category : Swift.Hashable {}
extension PhunwareMapping.Category : Swift.RawRepresentable {}
