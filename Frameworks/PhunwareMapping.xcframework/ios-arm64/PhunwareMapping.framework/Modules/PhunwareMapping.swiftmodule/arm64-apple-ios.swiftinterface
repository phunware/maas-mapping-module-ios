// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PhunwareMapping
import Combine
import CoreLocation
import Foundation
import LinkPresentation
import MapKit
import PWCore
import PWMapKit
import PhunwareFoundation
@_exported import PhunwareMapping
import PhunwareNetworking
import PhunwarePermissionPriming
import PhunwareTheming
import Swift
import UIKit
import _Concurrency
@objc public class CategoryCellViewModel : NSObject, CellViewModel {
  public var cellIdentifier: String {
    get
  }
  public init(mapLocalization: MapLocalization, managerProvider: ManagerProvider, category: MapConfig.Category, theme: MapTheme)
  @objc deinit
}
public enum MappingDeeplink {
  public enum RouteBuilderDestination {
    case pointOfInterest(mapName: String, id: Int)
    case coordinate(mapName: String, latitude: Double, longitude: Double, floorId: Int)
  }
  case routeBuilder(destination: RouteBuilderDestination)
  public var mapName: String? {
    get
  }
  public var urlHost: String {
    get
  }
  public var urlQueryItems: [URLQueryItem] {
    get
  }
  public init?(url: URL, allowedURLSchemes: Set<String> = Bundle.main.urlSchemes)
  public init?(dynamicLinkURL: URL, matchingURLString: String?)
  public func url(withScheme urlScheme: String) -> URL?
}
extension UIViewController {
  @_Concurrency.MainActor(unsafe) public var containerViewVisibleBackgroundAreaLayoutGuide: UILayoutGuide {
    get
  }
  @_Concurrency.MainActor(unsafe) public var containerViewSafeVisibleBackgroundAreaLayoutGuide: UILayoutGuide {
    get
  }
  @_Concurrency.MainActor(unsafe) public var containerViewBottomSheetLayoutGuide: UILayoutGuide {
    get
  }
  @_Concurrency.MainActor(unsafe) public var containerViewSafeBottomSheetLayoutGuide: UILayoutGuide {
    get
  }
}
extension UIView {
  @_Concurrency.MainActor(unsafe) public var frameLayoutGuide: UILayoutGuide {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class OtherCategoriesListViewController : UIViewController {
  @_Concurrency.MainActor(unsafe) public var viewModel: OtherCategoriesListViewModel!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension OtherCategoriesListViewController : StoryboardInitializable {
  @_Concurrency.MainActor(unsafe) public static var storyboardName: String {
    get
  }
}
extension OtherCategoriesListViewController : UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)
}
extension OtherCategoriesListViewController : UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
}
@objc public class MeetingRoomViewModel : NSObject {
  public var meetingRoom: MeetingRoom {
    get
    set
  }
  public var defaultPOIImage: UIImage? {
    get
    set
  }
  public init(meetingRoom: MeetingRoom)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DirectionCardCell : UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension DirectionCardCell : CellViewModelConfigurable {
  @_Concurrency.MainActor(unsafe) public func configure(cellViewModel: CellViewModel)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DirectionListViewController : UIViewController {
  @_Concurrency.MainActor(unsafe) public var viewModel: DirectionListViewModel!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension DirectionListViewController : StoryboardInitializable {
  @_Concurrency.MainActor(unsafe) public static var storyboardName: String {
    get
  }
}
extension DirectionListViewController : ContainerContentEmbedding {
  @_Concurrency.MainActor(unsafe) public var contentViewController: UIViewController {
    get
  }
  @_Concurrency.MainActor(unsafe) public var configuration: ContentEmbeddingConfig {
    get
  }
  @_Concurrency.MainActor(unsafe) public func containerViewController(_ containerViewController: ContainerViewController, willShowContentState state: ContainerViewController.ContentContainerState)
  @_Concurrency.MainActor(unsafe) public func containerViewController(_ containerViewController: ContainerViewController, didShowContentState state: ContainerViewController.ContentContainerState)
  @_Concurrency.MainActor(unsafe) public func containerViewController(_ containerViewController: ContainerViewController, didUpdateProgress progress: Float, from smallerState: ContainerViewController.ContentContainerState, to largerState: ContainerViewController.ContentContainerState)
}
extension DirectionListViewController : UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UITableView) -> Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
}
extension DirectionListViewController : UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)
}
@_hasMissingDesignatedInitializers public class Floor {
  public var level: Int {
    get
  }
  public var identifier: Int {
    get
  }
  public var name: String {
    get
  }
  public var building: Building? {
    get
  }
  @objc deinit
}
extension Floor : Hashable {
  public static func == (lhs: Floor, rhs: Floor) -> Bool
  public func hash(into hasher: inout Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class Building {
  public var pointOfInterests: [PointOfInterest] {
    get
  }
  public var identifier: Int {
    get
  }
  public var name: String {
    get
  }
  public var center: CLLocation? {
    get
  }
  public var floors: [Floor] {
    get
  }
  public var initialFloor: Floor? {
    get
  }
  public init(_ pwBuilding: PWBuilding)
  public func floor(byId id: Int) -> Floor?
  @objc deinit
}
extension Building : Hashable {
  public static func == (lhs: Building, rhs: Building) -> Bool
  public func hash(into hasher: inout Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Building : MapContaining {
  public var container: MapContainer {
    get
  }
}
@_hasMissingDesignatedInitializers public class Direction {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PhunwareAnalytics {
  public static func disableAutomaticScreenViewEvents()
  public static func startScreenViewEvent(_ name: String, appSection: String? = nil, parameters: [AnyHashable : Any]? = nil, for viewController: UIViewController)
  public static func endScreenViewEvent(for viewController: UIViewController)
  public static func setScreenName(_ screenName: String)
  public static func addCustomEvent(_ name: String, parameters: [String : String]? = nil)
  @objc deinit
}
public protocol POICoordinatorDelegate : AnyObject {
  func coordinatorDidFinish(_ coordinator: POICoordinator)
  func coordinator(_ coordinator: POICoordinator, didSelectActionLink actionLink: ActionLink)
  func coordinator(_ coordinator: POICoordinator, didStartHomeToVenueRoutingWith geozoneIdentifiers: Set<String>, destination: HomeToVenueDestination)
  func coordinator(_ coordinator: POICoordinator, didStopHomeToVenueRoutingWith geozoneIdentifiers: Set<String>)
  func coordinator(_ coordinator: POICoordinator, customImageWithName name: String) -> UIImage?
  func coordinator(_ coordinator: POICoordinator, didRequestMeetingRoomsFor poiIdentifiers: [String], completion: @escaping (Result<[MeetingRoom], Error>) -> Void)
}
@objc public class POICoordinator : NSObject, Coordinator {
  public var childCoordinators: [Coordinator]
  public var navigationController: UINavigationController
  weak public var delegate: POICoordinatorDelegate?
  public var meetingRoomPOIIdentifiers: [Swift.String] {
    get
    set
  }
  public var supportedExternalMappingAppDeeplinks: [PhunwareMapping.ExternalMappingAppDeeplink]
  public var childMappingDeeplinkHandlers: [PhunwareMapping.MappingDeeplinkNavigable] {
    get
  }
  public var pendingMappingDeeplink: DeferredMappingDeeplink?
  public init<T>(navigationController: UINavigationController, mapConfig: MapConfig, mapLocalization: MapLocalization, mapContainerSelector: MapContainerSelector, themeConfiguring: T, allowsBackgroundLocationUpdates: Bool, allowsExitButtonToBeShown: Bool = true, hidesBottomBarWhenPushed: Bool = true, tabBarItem: UITabBarItem? = nil, meetingRoomPOIIdentifiers: [String], initialMeetingRoomPOIImageSize: CGSize?, buildingGroundOverlayRenderers: [BuildingGroundOverlayRenderer]? = nil) where T : PhunwareTheming.ThemeConfiguring, T.Theme == PhunwareMapping.MapTheme
  @objc deinit
  public func start()
  public func setMeetingRooms(_ meetingRooms: [MeetingRoom])
}
extension POICoordinator : RouteBuilderViewModelDelegate {
  public func viewModel(_ viewModel: RouteBuilderViewModel, didSearchRouteOrigin resultHandler: @escaping (RouteBuilderSearchResult) -> Void)
  public func viewModel(_ viewModel: RouteBuilderViewModel, didSearchRouteDestination resultHandler: @escaping (RouteBuilderSearchResult) -> Void)
  public func viewModel(_ viewModel: RouteBuilderViewModel, didSelectStartRouteFrom routeOrigin: MapPoint, to routeDestination: MapPoint)
  public func viewModelDidFinish(_ viewModel: RouteBuilderViewModel)
}
extension POICoordinator : ContainerViewControllerDelegate {
  public func containerViewControllerDidExit(_ viewController: ContainerViewController)
}
extension POICoordinator : BrowseViewModelDelegate {
  public func viewModelDidSelectSearch(_ viewModel: BrowseViewModel)
  public func viewModel(_ viewModel: BrowseViewModel, didSelect category: MapConfig.Category)
  public func viewModel(_ viewModel: BrowseViewModel, didSelect category: MapConfig.Category, otherCategories: [MapConfig.Category])
}
extension POICoordinator : SearchViewModelDelegate {
  public func viewModel(_ viewModel: SearchViewModel, didSelect poi: PointOfInterest)
  public func viewModel(_ viewModel: SearchViewModel, didSelect currentLocation: UserLocation)
  public func viewModel(_ viewModel: SearchViewModel, didSelectRouteToPointOfInterest poi: PointOfInterest)
  public func viewModelDidFinish(_ viewModel: SearchViewModel)
  public func viewModelDidSelectSearchByBuilding(_ viewModel: SearchViewModel)
}
extension POICoordinator : DetailViewModelDelegate {
  public func viewModelDidExit(_ viewModel: DetailViewModel)
  public func viewModel(_ viewModel: DetailViewModel, didSelectActionLink actionLink: ActionLink)
  public func viewModel(_ viewModel: DetailViewModel, didSelectRouteToPointOfInterest pointOfInterest: PointOfInterest)
  public func viewModel(_ viewModel: DetailViewModel, customImageWithName name: String) -> UIImage?
}
extension POICoordinator : CategoryPOIListViewModelDelegate {
  public func viewModel(_ viewModel: CategoryPOIListViewModel, didSelect poi: PointOfInterest)
  public func viewModel(_ viewModel: CategoryPOIListViewModel, didSelectRouteToPointOfInterest poi: PointOfInterest)
}
extension POICoordinator : OtherCategoriesListViewModelDelegate {
  public func viewModel(_ viewModel: OtherCategoriesListViewModel, didSelect category: MapConfig.Category)
}
extension POICoordinator {
  public func viewModel(_ viewModel: MapViewModel, didSelect poi: PointOfInterest)
  public func viewModel(_ viewModel: MapViewModel, didDeselect poi: PointOfInterest)
}
extension POICoordinator : CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation])
  @objc dynamic public func locationManager(_ manager: CLLocationManager, didFailWithError error: Error)
  @objc dynamic public func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus)
}
extension POICoordinator : MappingDeeplinkNavigable {
  public var isMappingDeeplinkingAvailable: Bool {
    get
  }
  public func queryCanOpenDirectly(_ deeplink: MappingDeeplink, completion: @escaping (Bool) -> Void)
  public func openDeeplink(_ deeplink: MappingDeeplink) -> Bool
}
extension POICoordinator : DirectionListViewModelDelegate {
  public func viewModelDidSelectExit(_ viewModel: DirectionListViewModel)
  public func viewModel(_ viewModel: DirectionListViewModel, didSelect direction: Direction)
}
extension POICoordinator : OffRouteViewModelDelegate {
  public func viewModel(_ viewModel: OffRouteViewModel, didFinishWithResult result: OffRouteViewModel.FinishResult)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CategoryGridCell : UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CategoryGridCell : CellViewModelConfigurable {
  @_Concurrency.MainActor(unsafe) public func configure(cellViewModel: CellViewModel)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BrowseViewController : UIViewController {
  @_Concurrency.MainActor(unsafe) public var viewModel: BrowseViewModel!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension BrowseViewController : StoryboardInitializable {
  @_Concurrency.MainActor(unsafe) public static var storyboardName: String {
    get
  }
}
extension BrowseViewController : ContainerContentEmbedding {
  @_Concurrency.MainActor(unsafe) public var contentViewController: UIViewController {
    get
  }
  @_Concurrency.MainActor(unsafe) public var configuration: ContentEmbeddingConfig {
    get
  }
}
extension BrowseViewController : UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath)
}
extension BrowseViewController : UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SearchViewController : UIViewController {
  @_Concurrency.MainActor(unsafe) public var viewModel: SearchViewModel!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SearchViewController : StoryboardInitializable {
  @_Concurrency.MainActor(unsafe) public static var storyboardName: String {
    get
  }
}
extension SearchViewController : UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UITableView) -> Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String?
}
extension SearchViewController : UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)
}
extension SearchViewController : UISearchBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String)
}
public protocol OtherCategoriesListViewModelDelegate : AnyObject {
  func viewModel(_ viewModel: OtherCategoriesListViewModel, didSelect category: MapConfig.Category)
}
@objc public class OtherCategoriesListViewModel : NSObject {
  weak public var delegate: OtherCategoriesListViewModelDelegate?
  public init(mapLocalization: MapLocalization, managerProvider: ManagerProvider, categories: [MapConfig.Category], theme: MapTheme)
  @objc deinit
}
extension OtherCategoriesListViewModel {
  public func handleCategorySelection(at indexPath: IndexPath)
}
public struct Gradient {
  public struct Stop {
    public var color: UIColor
    public var location: CGFloat
    public init(color: UIColor, location: CGFloat)
  }
  public enum Kind {
    case linear(start: CGPoint, end: CGPoint)
    case radial(startCenter: CGPoint, startRadius: CGFloat, endCenter: CGPoint, endRadius: CGFloat)
  }
  public static func horizontal(leftColor: UIColor, rightColor: UIColor) -> Gradient
  public static func vertical(topColor: UIColor, bottomColor: UIColor) -> Gradient
  public var stops: [Stop]
  public var kind: Kind
  public var options: CGGradientDrawingOptions
  public init(stops: [Stop], kind: Kind, options: CGGradientDrawingOptions = [])
  public var cgGradient: CGGradient? {
    get
  }
}
public class MapPoint : Equatable {
  public init(pointOfInterest: PointOfInterest)
  public init(customPointOfInterest: CustomPointOfInterest)
  public init(userLocation: UserLocation, title: String)
  public var pointOfInterestIdentifier: Int? {
    get
  }
  public static func == (lhs: MapPoint, rhs: MapPoint) -> Bool
  @objc deinit
}
public struct ExternalMappingAppDeeplink {
  public static let appleMapsDrivingDirections: PhunwareMapping.ExternalMappingAppDeeplink
  public static let googleMapsDrivingDirections: PhunwareMapping.ExternalMappingAppDeeplink
  public let appName: String
  public let urlScheme: String
  public let urlHost: String
  public let urlPathHandler: (PointOfInterest) -> String
  public let queryItemsHandler: (PointOfInterest) -> [(name: String, value: String?)]
  public init(appName: String, urlScheme: String, urlHost: String = "", urlPathHandler: @escaping (_ poiForPath: PointOfInterest) -> String = { _ in "" }, queryItemsHandler: @escaping (_ poiForQueryItems: PointOfInterest) -> [(name: String, value: String?)])
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SolidColorButton : UIButton {
  @_Concurrency.MainActor(unsafe) public func backgroundImageColor(for state: UIControl.State) -> UIColor?
  @_Concurrency.MainActor(unsafe) public func setBackgroundImageColor(_ color: UIColor?, for state: UIControl.State)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?)
  @_Concurrency.MainActor(unsafe) public func configureSolidColorButton(_ config: TextConfiguration, for state: UIControl.State)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol DirectionListViewModelDelegate : AnyObject {
  func viewModelDidSelectExit(_ viewModel: DirectionListViewModel)
  func viewModel(_ viewModel: DirectionListViewModel, didSelect direction: Direction)
}
@objc public class DirectionListViewModel : NSObject {
  weak public var delegate: DirectionListViewModelDelegate?
  public init(route: MapRoute, managerProvider: ManagerProvider, localization: MapLocalization, theme: MapTheme)
  @objc deinit
}
extension DirectionListViewModel {
  public var totalSections: Int {
    get
  }
  public var totalCellViewModels: Int {
    get
  }
  public func cellViewModel(at indexPath: IndexPath) -> DirectionCellViewModel?
  public func handleSelection(at indexPath: IndexPath)
  public func handleExitButtonPress()
  public func selectRouteDirection(_ direction: Direction)
  public func handleBottomSheetWillMinimize()
  public func handleBottomSheetWillMaximize()
  public func handleBottomSheetDidMinimize()
  public func handleBottomSheetDidMaximize()
  public func handleBottomSheetProgressDidUpdate(to progress: Float)
}
extension DirectionListViewModel {
  public var titleAttributedText: NSAttributedString {
    get
  }
  public func applyTheme()
  public func createCellViewModels()
}
public enum RouteBuilderSearchResult {
  case currentLocation(UserLocation)
  case pointOfInterest(PointOfInterest)
}
public protocol RouteBuilderViewModelDelegate : AnyObject {
  func viewModel(_ viewModel: RouteBuilderViewModel, didSearchRouteOrigin resultHandler: @escaping (RouteBuilderSearchResult) -> Void)
  func viewModel(_ viewModel: RouteBuilderViewModel, didSearchRouteDestination resultHandler: @escaping (RouteBuilderSearchResult) -> Void)
  func viewModel(_ viewModel: RouteBuilderViewModel, didSelectStartRouteFrom routeOrigin: MapPoint, to routeDestination: MapPoint)
  func viewModelDidFinish(_ viewModel: RouteBuilderViewModel)
}
@objc public class RouteBuilderViewModel : NSObject {
  weak public var delegate: RouteBuilderViewModelDelegate?
  public init(mapLocalization: MapLocalization, theme: MapTheme, accessibleRoutesInitialValue: Bool, destination mapPoint: MapPoint? = nil)
  @objc deinit
}
extension RouteBuilderViewModel {
  public func handleClose()
  public func handleRouteOriginSelection()
  public func handleRouteDestinationSelection()
  public func handleSwapRouteOriginAndDestination()
  public func handleAccessibleRouteToggle(toggleValue: Bool)
  public func handleStartRouteSelection()
  public func setRouteOrigin(to pointOfInterest: PointOfInterest)
  public func setRouteOrigin(to userLocation: UserLocation)
  public func setRouteDestination(to mapPoint: MapPoint)
  public func setRouteDestination(to userLocation: UserLocation)
}
public protocol ContainerViewControllerDelegate : AnyObject {
  func containerViewControllerDidExit(_ viewController: ContainerViewController)
}
@objc @_Concurrency.MainActor(unsafe) public class ContainerViewController : UIViewController {
  public enum ContentContainerState {
    case minimum
    case peeking
    case full
    public static func == (a: PhunwareMapping.ContainerViewController.ContentContainerState, b: PhunwareMapping.ContainerViewController.ContentContainerState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var visibleBackgroundAreaLayoutGuide: UILayoutGuide {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var safeVisibleBackgroundAreaLayoutGuide: UILayoutGuide {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var bottomSheetLayoutGuide: UILayoutGuide {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var safeBottomSheetLayoutGuide: UILayoutGuide {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(theme: MapTheme, mapLocalization: MapLocalization)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewSafeAreaInsetsDidChange()
  @objc deinit
}
extension ContainerViewController {
  @_Concurrency.MainActor(unsafe) public func toggleExitButton(visibility visible: Bool)
  @_Concurrency.MainActor(unsafe) public func toggleLoadingSpinner(visibility visible: Bool, animated: Bool)
  @_Concurrency.MainActor(unsafe) public func setBackgroundViewController(_ viewController: UIViewController)
  @_Concurrency.MainActor(unsafe) public func pushContent(embeddable: ContainerContentEmbedding, animated: Bool)
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func popContent(animated: Bool) -> ContainerContentEmbedding?
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func popToRootContent(animated: Bool) -> [ContainerContentEmbedding]?
  @_Concurrency.MainActor(unsafe) public func makeRectVisible(_ rect: CGRect, animated: Bool = true)
  @_Concurrency.MainActor(unsafe) public func peekContent() -> ContainerContentEmbedding?
  @_Concurrency.MainActor(unsafe) public func containsContent(where predicate: (ContainerContentEmbedding) throws -> Bool) rethrows -> Bool
  @_Concurrency.MainActor(unsafe) public func mappedContent<T>(where predicate: (ContainerContentEmbedding) throws -> T?) rethrows -> [T] where T : PhunwareMapping.ContainerContentEmbedding
}
extension ContainerViewController : UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIGestureRecognizer) -> Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldRequireFailureOf otherGestureRecognizer: UIGestureRecognizer) -> Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldBeRequiredToFailBy otherGestureRecognizer: UIGestureRecognizer) -> Bool
}
public enum ActionLinkType : Codable, RawRepresentable, Equatable {
  case calendar
  case email
  case location
  case phone
  case weblink
  case info
  case form
  case meetingRoomStatus(MeetingRoom.Status)
  case unknown
  public var rawValue: String {
    get
  }
  public init(rawValue: String)
  public typealias RawValue = Swift.String
}
public struct ActionLink : Codable, Equatable {
  public let type: ActionLinkType?
  public let displayText: String?
  public let actionContent: String?
  public var isValid: Bool {
    get
  }
  public static func == (a: PhunwareMapping.ActionLink, b: PhunwareMapping.ActionLink) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DetailViewController : UIViewController {
  @_Concurrency.MainActor(unsafe) public var viewModel: DetailViewModel!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMove(toParent parent: UIViewController?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension DetailViewController : StoryboardInitializable {
  @_Concurrency.MainActor(unsafe) public static var storyboardName: String {
    get
  }
}
extension DetailViewController : ContainerContentEmbedding {
  @_Concurrency.MainActor(unsafe) public var contentViewController: UIViewController {
    get
  }
  @_Concurrency.MainActor(unsafe) public var configuration: ContentEmbeddingConfig {
    get
  }
}
public protocol CategoryPOIListViewModelDelegate : AnyObject {
  func viewModel(_ viewModel: CategoryPOIListViewModel, didSelect poi: PointOfInterest)
  func viewModel(_ viewModel: CategoryPOIListViewModel, didSelectRouteToPointOfInterest poi: PointOfInterest)
}
@objc public class CategoryPOIListViewModel : NSObject {
  weak public var delegate: CategoryPOIListViewModelDelegate?
  public init(category: MapConfig.Category, mapContaining: MapContaining, meetingRooms: [Int : MeetingRoom], userLocation: UserLocation?, managerProvider: ManagerProvider, localization: MapLocalization, theme: MapTheme)
  @objc deinit
}
extension CategoryPOIListViewModel {
  public var totalSections: Int {
    get
  }
  public func totalCellViewModels(in section: Int) -> Int
  public func cellViewModel(at indexPath: IndexPath) -> CellViewModel?
  public func headerViewModel(forSection section: Int) -> CellViewModel?
  public func headerHeight(forSection section: Int) -> CGFloat
  public func handlePOISelection(at indexPath: IndexPath)
}
extension CategoryPOIListViewModel : POICellViewModelDelegate {
  public func viewModel(_ viewModel: POICellViewModel, didSelectRouteToPointOfInterest pointOfInterest: PointOfInterest)
}
public protocol CellViewModel : PhunwareMapping.CellIdentifiable {
}
public protocol CellViewModelConfigurable {
  func configure(cellViewModel: CellViewModel)
  func configureWillDisplayCell(cellViewModel: CellViewModel)
  func configureDidEndDisplaying(cellViewModel: CellViewModel)
}
extension CellViewModelConfigurable {
  public func configureWillDisplayCell(cellViewModel: CellViewModel)
  public func configureDidEndDisplaying(cellViewModel: CellViewModel)
}
public struct ContentEmbeddingConfig {
}
public protocol ContainerContentEmbedding {
  var contentViewController: UIViewController { get }
  var configuration: ContentEmbeddingConfig { get }
  func containerViewController(_ containerViewController: ContainerViewController, willShowContentState state: ContainerViewController.ContentContainerState)
  func containerViewController(_ containerViewController: ContainerViewController, didShowContentState state: ContainerViewController.ContentContainerState)
  func containerViewController(_ containerViewController: ContainerViewController, didUpdateProgress progress: Float, from smallerState: ContainerViewController.ContentContainerState, to largerState: ContainerViewController.ContentContainerState)
}
extension ContainerContentEmbedding {
  public func containerViewController(_ containerViewController: ContainerViewController, willShowContentState state: ContainerViewController.ContentContainerState)
  public func containerViewController(_ containerViewController: ContainerViewController, didShowContentState state: ContainerViewController.ContentContainerState)
  public func containerViewController(_ containerViewController: ContainerViewController, didUpdateProgress progress: Float, from smallerState: ContainerViewController.ContentContainerState, to largerState: ContainerViewController.ContentContainerState)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class OffRouteViewController : UIViewController {
  @_Concurrency.MainActor(unsafe) public var viewModel: OffRouteViewModel!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension OffRouteViewController : StoryboardInitializable {
  @_Concurrency.MainActor(unsafe) public static var storyboardName: String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MapViewController : UIViewController {
  @_Concurrency.MainActor(unsafe) public var viewModel: MapViewModel!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMove(toParent parent: UIViewController?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension MapViewController : StoryboardInitializable {
  @_Concurrency.MainActor(unsafe) public static var storyboardName: String {
    get
  }
}
extension MapViewController : PWMapViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: PWMapView!, didChangeIndoorUserTrackingMode mode: PWTrackingMode)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: PWMapView!, locationManager: PWLocationManager!, didUpdateIndoorUserLocation userLocation: PWUserLocation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: PWMapView!, didChange instruction: PWRouteInstruction!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: PWMapView!, didSelect view: PWBuildingAnnotationView!, with poi: PWPointOfInterest!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: MKMapView, regionDidChangeAnimated animated: Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapViewWillSetCamera(_ mapView: PWMapView!) -> MKMapCamera!
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: PWMapView!, didDeselect view: PWBuildingAnnotationView!, with poi: PWPointOfInterest!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: PWMapView!, didFailToLocateIndoorUserWithError error: Error!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: PWMapView!, didChange floor: PWFloor!)
}
extension MapViewController : MKMapViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: MKMapView, regionWillChangeAnimated animated: Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -> MKOverlayRenderer
}
extension MapViewController : UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)
}
extension MapViewController : UITableViewDelegate {
}
extension MapViewController : UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell
}
extension MapViewController : UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath)
}
extension MapViewController : UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIScrollView, withVelocity velocity: CGPoint, targetContentOffset: UnsafeMutablePointer<CGPoint>)
}
public protocol ShareLocationCoordinatorDelegate : AnyObject {
  func coordinatorDidFinish(_ coordinator: ShareLocationCoordinator)
  func coordinator(_ coordinator: ShareLocationCoordinator, didSelectActionLink actionLink: ActionLink)
  func coordinator(_ coordinator: ShareLocationCoordinator, didStartHomeToVenueRoutingWith geozoneIdentifiers: Set<String>, destination: HomeToVenueDestination)
  func coordinator(_ coordinator: ShareLocationCoordinator, didStopHomeToVenueRoutingWith geozoneIdentifiers: Set<String>)
  func coordinator(_ coordinator: ShareLocationCoordinator, customImageWithName name: String) -> UIImage?
  func coordinator(_ coordinator: ShareLocationCoordinator, didRequestShareURLFor location: ShareableLocation, withCompletionHandler completionHandler: @escaping (Result<URL, Error>) -> Void)
}
@objc public class ShareLocationCoordinator : NSObject, Coordinator {
  public var childCoordinators: [Coordinator]
  public var navigationController: UINavigationController
  weak public var delegate: ShareLocationCoordinatorDelegate?
  public init<T>(navigationController: UINavigationController, mapConfig: MapConfig, mapLocalization: MapLocalization, mapContainerSelector: MapContainerSelector, themeConfiguring: T, allowsExitButtonToBeShown: Bool = true, hidesBottomBarWhenPushed: Bool = true, tabBarItem: UITabBarItem? = nil, buildingGroundOverlayRenderers: [BuildingGroundOverlayRenderer]? = nil) where T : PhunwareTheming.ThemeConfiguring, T.Theme == PhunwareMapping.MapTheme
  public func start()
  @objc deinit
}
extension ShareLocationCoordinator : ContainerViewControllerDelegate {
  public func containerViewControllerDidExit(_ viewController: ContainerViewController)
}
extension ShareLocationCoordinator {
  public func viewModel(_ viewModel: MapViewModel, didSelect poi: PointOfInterest)
  public func viewModel(_ viewModel: MapViewModel, didDeselect poi: PointOfInterest)
}
public protocol OffRouteViewModelDelegate : AnyObject {
  func viewModel(_ viewModel: OffRouteViewModel, didFinishWithResult result: OffRouteViewModel.FinishResult)
}
@objc public class OffRouteViewModel : NSObject {
  public enum FinishResult {
    case dismiss
    case reroute
    case dontShowAgain
    public static func == (a: PhunwareMapping.OffRouteViewModel.FinishResult, b: PhunwareMapping.OffRouteViewModel.FinishResult) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(mapLocalization: MapLocalization, theme: MapTheme)
  @objc deinit
}
public class PointOfInterest : Equatable, Comparable {
  public enum ParkingLocation {
    case coordinate(CLLocationCoordinate2D)
    case addressString(String)
  }
  public struct Link : Decodable {
    public let title: String
    public let url: URL
    public init(from decoder: Swift.Decoder) throws
  }
  public var identifier: Int {
    get
  }
  public var title: String {
    get
  }
  public var subtitle: String {
    get
  }
  public var imageURL: URL? {
    get
  }
  public var headerImageURL: URL? {
    get
  }
  public var defaultHeaderImageName: String {
    get
  }
  public var summary: String? {
    get
  }
  public var websiteURLString: String? {
    get
  }
  public var links: [Link] {
    get
  }
  public var phoneNumberString: String? {
    get
  }
  public var keywords: [String]? {
    get
  }
  public var poiType: String {
    get
  }
  public var floor: Floor? {
    get
  }
  public var coordinate: CLLocationCoordinate2D {
    get
  }
  weak public var parkingPOI: PointOfInterest? {
    get
  }
  public var parkingCoordinate: CLLocationCoordinate2D? {
    get
  }
  public var parkingAddress: String? {
    get
  }
  public var effectiveParkingLocation: ParkingLocation {
    get
  }
  public init(_ pwPointOfInterest: PWPointOfInterest)
  public static func == (lhs: PointOfInterest, rhs: PointOfInterest) -> Bool
  public static func < (lhs: PointOfInterest, rhs: PointOfInterest) -> Bool
  @objc deinit
}
extension MapLocalization {
  public static let defaults: Swift.String
}
public class UserLocation {
  public var buildingIdentifier: Int {
    get
  }
  public init(_ pwUserLocation: PWUserLocation)
  public var coordinate: CLLocationCoordinate2D {
    get
  }
  public var floorIdentifier: Int? {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DropShadowView : UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var shadowColor: UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var shadowOffset: CGSize {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var shadowRadius: CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var shadowOpacity: Float {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var cornerRadius: CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var backgroundColor: UIColor? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func addSubview(_ view: UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func insertSubview(_ view: UIView, at index: Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func insertSubview(_ view: UIView, belowSubview siblingSubview: UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func insertSubview(_ view: UIView, aboveSubview siblingSubview: UIView)
  @objc deinit
}
public struct ShareableLocation {
  public let mapName: String
  public let floorID: Int?
  public let coordinate: CLLocationCoordinate2D
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DirectionCell : UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var viewModel: DirectionCellViewModel!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForReuse()
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension DirectionCell : CellViewModelConfigurable {
  @_Concurrency.MainActor(unsafe) public func configure(cellViewModel: CellViewModel)
}
@objc public class DirectionCellViewModel : NSObject {
  public init(direction: Direction, mapLocalization: MapLocalization, theme: MapTheme, usesLargeIcons: Bool)
  @objc deinit
}
extension DirectionCellViewModel : CellViewModel {
  public var cellIdentifier: String {
    get
  }
}
public struct HomeToVenueDestination {
  public let mapName: String
  public let pointOfInterest: PointOfInterest
  public init(mapName: String, pointOfInterest: PointOfInterest)
}
extension Bundle {
  public struct URLType : Codable {
    public var role: String?
    public var name: String?
    public var iconFile: String?
    public var schemes: [String]
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public var urlTypes: [URLType] {
    get
  }
  public var urlSchemes: Set<String> {
    get
  }
}
public protocol POICellViewModelDelegate : AnyObject {
  func viewModel(_ viewModel: POICellViewModel, didSelectRouteToPointOfInterest pointOfInterest: PointOfInterest)
}
@objc public class POICellViewModel : NSObject {
  weak public var delegate: POICellViewModelDelegate?
  public init(pointOfInterest: PointOfInterest, meetingRoom: MeetingRoom?, managerProvider: ManagerProvider, theme: MapTheme)
  public func loadImage()
  public func handleRouteButtonPress()
  @objc deinit
}
extension POICellViewModel : CellViewModel {
  public static let nibName: Swift.String
  public static let cellIdentifier: Swift.String
  public var cellIdentifier: String {
    get
  }
}
extension POICellViewModel : Comparable {
  public static func < (lhs: POICellViewModel, rhs: POICellViewModel) -> Bool
}
public class BuildingGroundOverlayRenderer {
  public init(buildingIdentifiers: [Int], groundRenderer: MKOverlayRenderer)
  @objc deinit
}
public enum MapContainer {
  case campus(Campus)
  case building(Building)
}
public protocol MapContaining {
  var container: MapContainer { get }
  var pointOfInterests: [PointOfInterest] { get }
  var center: CLLocation? { get }
  var floors: [Floor] { get }
  var initialFloor: Floor? { get }
  func floor(byId id: Int) -> Floor?
}
public protocol RoutingCoordinatorDelegate : AnyObject {
  func coordinatorDidFinish(_ coordinator: RoutingCoordinator)
  func coordinator(_ coordinator: RoutingCoordinator, didSelectActionLink actionLink: ActionLink)
  func coordinator(_ coordinator: RoutingCoordinator, didStartHomeToVenueRoutingWith geozoneIdentifiers: Set<String>, destination: HomeToVenueDestination)
  func coordinator(_ coordinator: RoutingCoordinator, didStopHomeToVenueRoutingWith geozoneIdentifiers: Set<String>)
  func coordinator(_ coordinator: RoutingCoordinator, customImageWithName name: String) -> UIImage?
  func coordinator(_ coordinator: RoutingCoordinator, didRequestMeetingRoomsFor poiIdentifiers: [String], completion: @escaping (Result<[MeetingRoom], Error>) -> Void)
}
@objc public class RoutingCoordinator : NSObject, Coordinator {
  public var childCoordinators: [Coordinator]
  public var navigationController: UINavigationController
  weak public var delegate: RoutingCoordinatorDelegate?
  public var meetingRoomPOIIdentifiers: [Swift.String] {
    get
    set
  }
  public var supportedExternalMappingAppDeeplinks: [PhunwareMapping.ExternalMappingAppDeeplink]
  public var childMappingDeeplinkHandlers: [PhunwareMapping.MappingDeeplinkNavigable] {
    get
  }
  public var pendingMappingDeeplink: DeferredMappingDeeplink?
  public init<T>(navigationController: UINavigationController, mapConfig: MapConfig, mapLocalization: MapLocalization, mapContainerSelector: MapContainerSelector, themeConfiguring: T, allowsBackgroundLocationUpdates: Bool, allowsExitButtonToBeShown: Bool = true, hidesBottomBarWhenPushed: Bool = true, tabBarItem: UITabBarItem? = nil, meetingRoomPOIIdentifiers: [String], initialMeetingRoomPOIImageSize: CGSize?, buildingGroundOverlayRenderers: [BuildingGroundOverlayRenderer]? = nil) where T : PhunwareTheming.ThemeConfiguring, T.Theme == PhunwareMapping.MapTheme
  @objc deinit
  public func start()
  public func setMeetingRooms(_ meetingRooms: [MeetingRoom])
}
extension RoutingCoordinator : ContainerViewControllerDelegate {
  public func containerViewControllerDidExit(_ viewController: ContainerViewController)
}
extension RoutingCoordinator : RouteBuilderViewModelDelegate {
  public func viewModel(_ viewModel: RouteBuilderViewModel, didSearchRouteOrigin resultHandler: @escaping (RouteBuilderSearchResult) -> Void)
  public func viewModel(_ viewModel: RouteBuilderViewModel, didSearchRouteDestination resultHandler: @escaping (RouteBuilderSearchResult) -> Void)
  public func viewModel(_ viewModel: RouteBuilderViewModel, didSelectStartRouteFrom routeOrigin: MapPoint, to routeDestination: MapPoint)
  public func viewModelDidFinish(_ viewModel: RouteBuilderViewModel)
}
extension RoutingCoordinator : SearchViewModelDelegate {
  public func viewModel(_ viewModel: SearchViewModel, didSelect poi: PointOfInterest)
  public func viewModel(_ viewModel: SearchViewModel, didSelect currentLocation: UserLocation)
  public func viewModel(_ viewModel: SearchViewModel, didSelectRouteToPointOfInterest poi: PointOfInterest)
  public func viewModelDidFinish(_ viewModel: SearchViewModel)
  public func viewModelDidSelectSearchByBuilding(_ viewModel: SearchViewModel)
}
extension RoutingCoordinator : DetailViewModelDelegate {
  public func viewModelDidExit(_ viewModel: DetailViewModel)
  public func viewModel(_ viewModel: DetailViewModel, didSelectActionLink actionLink: ActionLink)
  public func viewModel(_ viewModel: DetailViewModel, didSelectRouteToPointOfInterest pointOfInterest: PointOfInterest)
  public func viewModel(_ viewModel: DetailViewModel, customImageWithName name: String) -> UIImage?
}
extension RoutingCoordinator : DirectionListViewModelDelegate {
  public func viewModelDidSelectExit(_ viewModel: DirectionListViewModel)
  public func viewModel(_ viewModel: DirectionListViewModel, didSelect direction: Direction)
}
extension RoutingCoordinator : CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation])
  @objc dynamic public func locationManager(_ manager: CLLocationManager, didFailWithError error: Error)
  @objc dynamic public func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus)
}
extension RoutingCoordinator : MappingDeeplinkNavigable {
  public var isMappingDeeplinkingAvailable: Bool {
    get
  }
  public func queryCanOpenDirectly(_ deeplink: MappingDeeplink, completion: @escaping (Bool) -> Void)
  public func openDeeplink(_ deeplink: MappingDeeplink) -> Bool
}
extension RoutingCoordinator : OffRouteViewModelDelegate {
  public func viewModel(_ viewModel: OffRouteViewModel, didFinishWithResult result: OffRouteViewModel.FinishResult)
}
public struct MeetingRoom {
  public enum Status {
    case available
    case occupied
    case unavailable
    case unknown
    case `default`
    public static func == (a: PhunwareMapping.MeetingRoom.Status, b: PhunwareMapping.MeetingRoom.Status) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let maasPOIId: String
  public let status: Status
  public let poiImageSize: CGSize?
  public init(maasPOIId: String, status: Status, poiImageSize: CGSize?)
}
public protocol CellIdentifiable : AnyObject {
  var cellIdentifier: String { get }
}
public protocol ManagerProvider {
  var mapContainerManager: MapContainerManager { get }
  var resourceManager: ResourceManager { get }
  var recentLocationManager: RecentLocationManager { get }
}
@_hasMissingDesignatedInitializers public class RuntimeManagerProvider : ManagerProvider {
  public var mapContainerManager: MapContainerManager {
    get
    set
  }
  public var resourceManager: ResourceManager {
    get
    set
  }
  public var recentLocationManager: RecentLocationManager {
    get
    set
  }
  @objc deinit
}
@objc public class MapRoute : NSObject {
  public init(route: PWRoute, uiOptions: PWRouteUIOptions, fallbackDestinationTitle: String)
  @objc deinit
}
public typealias MapContainerLoadResult = (Result<MapContaining, Error>)
@_hasMissingDesignatedInitializers public class MapContainerManager {
  public func loadMapContainer(with mapContainerConfig: MapContainerConfiguring, completion: @escaping (MapContainerLoadResult) -> Void)
  @objc deinit
}
@available(*, deprecated, renamed: "MapContainerManager")
public typealias BuildingManager = MapContainerManager
@available(*, deprecated, message: "Use MapContainerLoadResult with MapContainerManager.loadMapContainer(with:completion:) instead.")
public typealias BuildingResult = Result<Building, Error>
extension MapContainerManager {
  @available(*, deprecated, renamed: "loadMapContainer(with:completion:)")
  public func loadBuilding(with identifier: Int, completion: @escaping (BuildingResult) -> Void)
}
public protocol SearchViewModelDelegate : AnyObject {
  func viewModel(_ viewModel: SearchViewModel, didSelect poi: PointOfInterest)
  func viewModel(_ viewModel: SearchViewModel, didSelect currentLocation: UserLocation)
  func viewModel(_ viewModel: SearchViewModel, didSelectRouteToPointOfInterest poi: PointOfInterest)
  func viewModelDidSelectSearchByBuilding(_ viewModel: SearchViewModel)
  func viewModelDidFinish(_ viewModel: SearchViewModel)
}
@objc public class SearchViewModel : NSObject {
  weak public var delegate: SearchViewModelDelegate?
  public var userLocation: UserLocation? {
    get
    set
  }
  public var allowsCurrentLocation: Bool {
    get
    set
  }
  public init(mapContaining: MapContaining, meetingRooms: [Int : MeetingRoom], categories: [MapConfig.Category], showsNavigationBar: Bool, groupsSingleBuildingPOIsByCategory: Bool, managerProvider: ManagerProvider, localization: MapLocalization, theme: MapTheme)
  @objc deinit
}
extension SearchViewModel {
  public var totalSections: Int {
    get
  }
  public func numberOfItems(in section: Int) -> Int
  public func cellViewModel(at indexPath: IndexPath) -> CellViewModel?
  public func title(for section: Int) -> String?
  public func headerTextConfiguration(for section: Int) -> TextConfiguration?
  public var sectionHeaderBackgroundConfiguration: ColorConfiguration {
    get
  }
  public func search(with searchTerm: String, completion: (() -> Void)? = nil)
  public func loadSearchData(completion: (() -> Void)? = nil)
  public func makePOICellViewModel(from poi: PointOfInterest) -> POICellViewModel
  public func handleCancelButtonPress()
  public func handleCurrentLocationButtonPress()
  public func handleSearchByBuildingButtonPress()
  public func handlePOISelection(at indexPath: IndexPath)
}
extension SearchViewModel : POICellViewModelDelegate {
  public func viewModel(_ viewModel: POICellViewModel, didSelectRouteToPointOfInterest pointOfInterest: PointOfInterest)
}
extension String {
  public func normalizedPhoneURL() -> URL?
}
@objc public class MapViewModel : NSObject {
  public init(mapLocalization: MapLocalization, mapConfig: MapConfig, mapContainerSelector: MapContainerSelector, theme: MapTheme, meetingRoomPOIIdentifiers: [String] = [], initialMeetingRoomPOIImageSize: CGSize? = nil, buildingGroundOverlayRenderers: [BuildingGroundOverlayRenderer]?)
  @objc deinit
}
extension MapViewModel {
  public func acquireBlueDot()
  public var regionForMap: MKCoordinateRegion? {
    get
  }
  public var numberOfFloors: Int {
    get
  }
  public func zoomedMapRect(centeredOn coordinate: CLLocationCoordinate2D) -> MKMapRect?
  public func floor(at indexPath: IndexPath) -> PWFloor?
  public var initialFloor: PWFloor? {
    get
  }
  public func handleVisibleLayerOptionsButtonPressed(floorSelectorComponentRect rect: CGRect)
  public func handleFloorSelection(at indexPath: IndexPath)
  public func floorTextConfiguration(itemTitle: String) -> TextConfiguration
  public func currentFloorTextConfiguration(itemTitle: String) -> TextConfiguration
  public func start(route: MapRoute, toCustomPOI customPOI: PWCustomPointOfInterest?)
  public func endRoute()
  public var numberOfDirectionCellViewModels: Int {
    get
  }
  public func directionCellViewModel(at index: Int) -> DirectionCellViewModel?
  public func selectRouteDirection(_ direction: Direction)
  public func selectPOI(poi: PointOfInterest)
  public func zoom(to poi: PointOfInterest, ignoringNextPOISelectionChange shouldIgnoreNextPOISelectionChange: Bool = false)
  public func deselectExistingPOI()
  public var isMeetingRoomStatusEnabled: Bool {
    get
  }
  public var currentFloorID: Int? {
    get
  }
  public var meetingRoomPOIIdentifiersForCurrentFloor: [String] {
    get
  }
}
extension MapViewModel : CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus)
}
public class Campus {
  public var pointOfInterests: [PointOfInterest] {
    get
  }
  public var identifier: Int {
    get
  }
  public var center: CLLocation? {
    get
  }
  public var buildings: [Building] {
    get
  }
  public var floors: [Floor] {
    get
  }
  public var initialFloor: Floor? {
    get
  }
  public var overviewBuilding: Building? {
    get
  }
  public init(_ pwCampus: PWCampus)
  public func building(byId id: Int) -> Building?
  public func floor(byId id: Int) -> Floor?
  @objc deinit
}
extension Campus : Hashable {
  public static func == (lhs: Campus, rhs: Campus) -> Bool
  public func hash(into hasher: inout Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Campus : MapContaining {
  public var container: MapContainer {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CategoryPOIListViewController : UIViewController {
  @_Concurrency.MainActor(unsafe) public var viewModel: CategoryPOIListViewModel!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CategoryPOIListViewController : StoryboardInitializable {
  @_Concurrency.MainActor(unsafe) public static var storyboardName: String {
    get
  }
}
extension CategoryPOIListViewController : UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int)
}
extension CategoryPOIListViewController : UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UITableView) -> Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
}
public class KeyboardAdjuster {
  public init(adjustingView: UIView)
  public func start()
  @objc deinit
}
public protocol DetailViewModelDelegate : AnyObject {
  func viewModelDidExit(_ viewModel: DetailViewModel)
  func viewModel(_ viewModel: DetailViewModel, didSelectActionLink actionLink: ActionLink)
  func viewModel(_ viewModel: DetailViewModel, didSelectRouteToPointOfInterest pointOfInterest: PointOfInterest)
  func viewModel(_ viewModel: DetailViewModel, customImageWithName name: String) -> UIImage?
}
@objc @_hasMissingDesignatedInitializers public class DetailViewModel : NSObject {
  weak public var delegate: DetailViewModelDelegate?
  @objc deinit
}
extension DetailViewModel {
  public func handleExitButtonPress()
  public func handleActionLinkButtonPress(actionLink: ActionLink)
  public func handleTraitCollectionDidChange(_ current: UITraitCollection, previous: UITraitCollection?)
  public func handleRouteButtonPress()
}
public typealias FetchImageResult = Result<UIImage, Error>
public class ResourceManager {
  public enum ResourceManagerError : Error {
    case invalidImageData(Data)
  }
  public init(networkInteractor: NetworkInteracting)
  public func fetchImage(at url: URL, timeout: TimeInterval? = nil, cachePolicy: URLRequest.CachePolicy? = nil, completion: @escaping (FetchImageResult) -> Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CategoryRowCell : UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForReuse()
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CategoryRowCell : CellViewModelConfigurable {
  @_Concurrency.MainActor(unsafe) public func configure(cellViewModel: CellViewModel)
}
public protocol RegisterableFontFamily : Swift.CaseIterable, Swift.RawRepresentable {
  var rawValue: String { get }
  static var isRegistered: Bool { get set }
  static func registerFonts()
}
extension RegisterableFontFamily {
  public static func registerFonts()
  public func of(size: CGFloat) -> UIFont
}
public struct MapTheme {
  public struct TextStyle {
    public init(textColor: UIColor, font: UIFont)
  }
  public struct ModuleNavigation {
    public init(exitButtonTint: UIColor)
  }
  public struct BottomSheet {
    public init(title: TextStyle, detail: TextStyle, handle: UIColor, textFieldBackground: UIColor, background: UIColor)
  }
  public struct Search {
    public init(title: TextStyle, placeholder: TextStyle, tint: UIColor, topNoResults: TextStyle, bottomNoResults: TextStyle, currentLocation: TextStyle, currentLocationIcon: UIColor, sectionHeader: TextStyle, sectionHeaderBackground: UIColor, cancelButton: TextStyle, searchBarBackground: UIColor, searchByBuildingButton: TextStyle)
  }
  public struct NavigationBar {
    public init(title: TextStyle, tint: UIColor)
  }
  public struct Category {
    public init(header: TextStyle, itemTitle: TextStyle, background: UIColor)
  }
  public struct FloorSelector {
    public init(buttonTint: UIColor, buttonBackground: UIColor, itemBackground: UIColor, selectedItemBackground: UIColor, itemTitle: TextStyle, selectedItemTitle: TextStyle)
  }
  public struct POI {
    public init(itemTitle: TextStyle, itemSubtitle: TextStyle, routeTint: UIColor, background: UIColor)
  }
  public struct TextField {
    public init(label: TextStyle, field: TextStyle, background: UIColor)
  }
  public struct SolidColorButton {
    public struct State {
      public init(title: TextStyle, background: UIColor)
    }
    public init(normalState: State, disabledState: State)
  }
  public struct AccessibleRoute {
    public init(label: TextStyle, iconTint: UIColor, toggleTint: UIColor)
  }
  public struct Detail {
    public init(title: TextStyle, subtitle: TextStyle, actionLink: TextStyle, actionLinkIcon: UIColor, closeButtonTint: UIColor, contentHeader: TextStyle, contentText: TextStyle)
  }
  public struct DirectionList {
    public init(titlePrefix: TextStyle, title: TextStyle, exit: SolidColorButton, directionsHeader: TextStyle, itemInstruction: TextStyle, itemDescription: TextStyle, itemSelection: UIColor, itemIconBackground: UIColor)
  }
  public struct OffRoute {
    public init(title: TextStyle, message: TextStyle, dismiss: TextStyle, reroute: TextStyle, dontShowAgain: TextStyle)
  }
  public struct LoadingSpinner {
    public init(title: TextStyle, tint: UIColor, overlay: UIColor)
  }
  public struct LocationPermissionPrimer {
    public init(iconTint: UIColor, title: TextStyle, body: TextStyle, bulletedList: TextStyle, proceedButton: SolidColorButton, cancelButton: SolidColorButton)
  }
  public struct ShareLocation {
    public struct InfoButton {
      public init(title: TextStyle, image: UIImage, background: UIColor)
    }
    public struct ShareButton {
      public init(title: TextStyle, backgroundStart: UIColor, backgroundEnd: UIColor)
    }
    public struct InfoSheet {
      public init(title: TextStyle, detail: TextStyle, okayButton: TextStyle, okayButtonBackground: UIColor)
    }
    public init(infoButton: InfoButton, shareButton: ShareButton, infoSheet: InfoSheet, annotationImage: UIImage?)
  }
  public struct MapViewSelection {
    public init(title: TextStyle, closeButtonColor: UIColor, buildingTitle: TextStyle, buildingName: TextStyle, floorTitle: TextStyle, floorName: TextStyle, changeBuildingButton: TextStyle, changeFloorButton: TextStyle)
  }
  public struct GenericPicker {
    public init(title: TextStyle, backButtonColor: UIColor, cellTitle: TextStyle)
  }
  public struct POIList {
    public struct Header {
      public init(title: TextStyle, backgroundColor: UIColor)
    }
    public init(header: Header)
  }
  public struct BuildingSearch {
    public struct SearchBar {
      public init(placeholder: TextStyle, tint: UIColor, background: UIColor)
    }
    public struct SectionHeader {
      public init(title: TextStyle, background: UIColor)
    }
    public init(title: TextStyle, searchBar: SearchBar, cancelButton: TextStyle, sectionHeader: SectionHeader, buildingCellTitle: TextStyle, topNoResults: TextStyle, bottomNoResults: TextStyle)
  }
  public init(colorPalette: ColorPalette, textStyles: TextStyles, moduleNavigation: ModuleNavigation? = nil, bottomSheet: BottomSheet? = nil, search: Search? = nil, navigationBar: NavigationBar? = nil, category: Category? = nil, floorSelector: FloorSelector? = nil, poi: POI? = nil, textField: TextField? = nil, accessibleRoute: AccessibleRoute? = nil, startRoute: SolidColorButton? = nil, detail: Detail? = nil, directions: DirectionList? = nil, offRoute: OffRoute? = nil, loadingSpinner: LoadingSpinner? = nil, locationPermission: LocationPermissionPrimer? = nil, shareLocation: ShareLocation? = nil, mapViewSelection: MapViewSelection? = nil, buildingPicker: GenericPicker? = nil, floorPicker: GenericPicker? = nil, poiList: POIList? = nil, buildingSearch: BuildingSearch? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class RouteBuilderViewController : UIViewController {
  @_Concurrency.MainActor(unsafe) public var viewModel: RouteBuilderViewModel!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension RouteBuilderViewController : StoryboardInitializable {
  @_Concurrency.MainActor(unsafe) public static var storyboardName: String {
    get
  }
}
extension RouteBuilderViewController : ContainerContentEmbedding {
  @_Concurrency.MainActor(unsafe) public var contentViewController: UIViewController {
    get
  }
  @_Concurrency.MainActor(unsafe) public var configuration: ContentEmbeddingConfig {
    get
  }
}
public protocol PermissionCoordinatorDelegate : AnyObject {
  func coordinator(_ coordinator: PermissionCoordinator, customImageWithName name: String) -> UIImage?
  func coordinatorDidFinish(_ coordinator: PermissionCoordinator)
}
public class PermissionCoordinator : Coordinator {
  public var childCoordinators: [Coordinator]
  public var navigationController: UINavigationController
  weak public var delegate: PermissionCoordinatorDelegate?
  public init<T>(navigationController: UINavigationController, mapLocalization: MapLocalization, themeConfiguring: T) where T : PhunwareTheming.ThemeConfiguring, T.Theme == PhunwareMapping.MapTheme
  public func start()
  @objc deinit
}
extension PermissionCoordinator : PermissionPrimingCoordinatorDelegate {
  public func coordinator(_ coordinator: PermissionPrimingCoordinator, didCompleteWithPrimedPermissions primedPermissions: Set<Permission>?, fulfilledPermissions: Set<Permission>?, unfulfilledPermissions: Set<Permission>?)
  public func displayTemplate(for coordinator: PermissionPrimingCoordinator, permissions: OrderedSet<Permission>) -> DisplayTemplate
}
public protocol MapContainerConfiguring {
  var identifier: Int { get }
  var onCampusGeozoneIdentifiers: [Int] { get }
  var languageCode: String { get }
  var mapContainerConfigValue: MapConfig.MapContainerConfig { get }
}
public struct MapConfig : Codable {
  public struct Language : Codable {
    public let code: String?
    public let displayText: String?
    public let stringsFile: String?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public enum MapContainerConfig {
    case campus(CampusConfig)
    case building(BuildingConfig)
  }
  public struct CampusConfig : Codable, MapContainerConfiguring {
    public let campusIdentifier: Int
    public let onCampusGeozoneIdentifiers: [Int]
    public let languageCode: String
    public var identifier: Int {
      get
    }
    public var mapContainerConfigValue: MapConfig.MapContainerConfig {
      get
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct BuildingConfig : Codable, MapContainerConfiguring {
    public let buildingIdentifier: Int
    public let onCampusGeozoneIdentifiers: [Int]
    public let languageCode: String
    public var identifier: Int {
      get
    }
    public var mapContainerConfigValue: MapConfig.MapContainerConfig {
      get
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Map : Codable {
    public let mapName: String?
    public let campusConfigs: [CampusConfig]?
    public let buildingConfigs: [BuildingConfig]?
    public let offCampusGeofenceMeters: Double
    public let latitude: Double
    public let longitude: Double
    public let initialZoomLatDelta: Double
    public let initialZoomLongDelta: Double
    public let poiZoomLatDelta: Double
    public let poiZoomLongDelta: Double
    public let routeSnappingTolerance: String
    public let isManagedCompassEnabled: Bool
    public let isHomeToVenueEnabled: Bool
    public let isBlueDotLocationEnabled: Bool
    public let isMeetingRoomStatusEnabled: Bool
    public let meetingRoomStatusRefreshIntervalMilliSeconds: Double
    public let areAccessibleRoutesEnabledByDefault: Bool
    public init(from decoder: Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct MapSetting : Codable {
    public let maps: [Map]?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Category : Codable, Hashable {
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: PhunwareMapping.MapConfig.Category, b: PhunwareMapping.MapConfig.Category) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: Swift.Decoder) throws
  }
  public struct RouteUIConfig : Codable {
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct OffRouteConfig : Codable {
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public let languages: [Language]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DeferredMappingDeeplink {
}
public protocol MappingDeeplinkNavigable : AnyObject {
  var childMappingDeeplinkHandlers: [MappingDeeplinkNavigable] { get }
  var isMappingDeeplinkingAvailable: Bool { get }
  var pendingMappingDeeplink: DeferredMappingDeeplink? { get set }
  func queryCanOpenDirectly(_ deeplink: MappingDeeplink, completion: @escaping (Bool) -> Void)
  func openDeeplink(_ deeplink: MappingDeeplink) -> Bool
  func prepareForNavigation(to deeplink: MappingDeeplink)
}
extension MappingDeeplinkNavigable {
  public var isMappingDeeplinkingAvailable: Bool {
    get
  }
  public func prepareForNavigation(to deeplink: MappingDeeplink)
  public func followDeeplink(_ deeplink: MappingDeeplink, completion: @escaping (Bool) -> Void = { _ in })
  public func followPendingMappingDeeplinkIfAvailable()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class POICell : UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var viewModel: POICellViewModel!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForReuse()
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension POICell : CellViewModelConfigurable {
  @_Concurrency.MainActor(unsafe) public func configure(cellViewModel: CellViewModel)
  @_Concurrency.MainActor(unsafe) public func configureWillDisplayCell(cellViewModel: CellViewModel)
}
public enum CommonError : Error {
  case internalInconsistency
  case failedHTTPStatus(code: Int)
  case unsupportedDecodableType
  case invalidURL
}
@_hasMissingDesignatedInitializers public class CustomPointOfInterest : Equatable, Comparable {
  public var identifier: Int {
    get
  }
  public var title: String {
    get
  }
  public var subtitle: String {
    get
  }
  public var image: UIImage? {
    get
  }
  public var headerImageURL: URL? {
    get
  }
  public var defaultHeaderImageName: String {
    get
  }
  public var summary: String? {
    get
  }
  public var websiteURLString: String? {
    get
  }
  public var phoneNumberString: String? {
    get
  }
  public var keywords: [String]? {
    get
  }
  public var poiType: String {
    get
  }
  public var floor: Floor? {
    get
  }
  public var coordinate: CLLocationCoordinate2D {
    get
  }
  public static func == (lhs: CustomPointOfInterest, rhs: CustomPointOfInterest) -> Bool
  public static func < (lhs: CustomPointOfInterest, rhs: CustomPointOfInterest) -> Bool
  @objc deinit
}
public protocol BrowseViewModelDelegate : AnyObject {
  func viewModelDidSelectSearch(_ viewModel: BrowseViewModel)
  func viewModel(_ viewModel: BrowseViewModel, didSelect category: MapConfig.Category)
  func viewModel(_ viewModel: BrowseViewModel, didSelect category: MapConfig.Category, otherCategories: [MapConfig.Category])
}
@objc public class BrowseViewModel : NSObject {
  weak public var delegate: BrowseViewModelDelegate?
  public init(mapLocalization: MapLocalization, managerProvider: ManagerProvider, categories: [MapConfig.Category], otherCategory: MapConfig.Category?, theme: MapTheme, maxCategoriesToShow: Int)
  @objc deinit
}
extension BrowseViewModel {
  public func handleSearchSelection()
  public func handleCategorySelection(at indexPath: IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class GradientBackgroundButton : UIButton {
  @_Concurrency.MainActor(unsafe) public func backgroundImageGradient(for state: UIControl.State) -> Gradient?
  @_Concurrency.MainActor(unsafe) public func setBackgroundImageGradient(_ gradient: Gradient?, withSize size: CGSize? = nil, for state: UIControl.State)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct MapThemeConfigurator : ThemeConfiguring {
  public let colors: ColorPalette
  public let texts: TextStyles
  public init(colors: ColorPalette, texts: TextStyles)
  public func configureTheme() -> MapTheme
  public typealias Theme = PhunwareMapping.MapTheme
}
public struct MapContainerSelector {
  public init(languageCode: String, mapName: String)
}
@available(*, deprecated, renamed: "MapContainerSelector")
public typealias BuildingSelector = MapContainerSelector
public typealias MapLocalizationDictionary = Dictionary<String, Dictionary<String, String>>
public class MapLocalization {
  public init(with defaultLanguageCode: String)
  public func setLocalization(localizationDictionary: MapLocalizationDictionary?)
  @objc deinit
}
extension MapLocalization {
  public var currentLanguageCode: String {
    get
  }
}
@_hasMissingDesignatedInitializers public class RecentLocationManager {
  public var recentLocationIdentifiers: [Int] {
    get
  }
  public func storeRecentLocation(with mapPoint: MapPoint)
  public func storeRecentLocation(with poi: PointOfInterest)
  @objc deinit
}
extension PhunwareMapping.ContainerViewController.ContentContainerState : Swift.Equatable {}
extension PhunwareMapping.ContainerViewController.ContentContainerState : Swift.Hashable {}
extension PhunwareMapping.OffRouteViewModel.FinishResult : Swift.Equatable {}
extension PhunwareMapping.OffRouteViewModel.FinishResult : Swift.Hashable {}
extension PhunwareMapping.MeetingRoom.Status : Swift.Equatable {}
extension PhunwareMapping.MeetingRoom.Status : Swift.Hashable {}
